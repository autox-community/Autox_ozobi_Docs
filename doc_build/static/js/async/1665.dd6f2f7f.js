"use strict";(self.webpackChunkrepress_demo=self.webpackChunkrepress_demo||[]).push([["1665"],{6350:function(e,n,s){s.r(n),s.d(n,{default:()=>o});var t=s(2676),r=s(453);function i(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",div:"div",h2:"h2",ul:"ul",li:"li",pre:"pre"},(0,r.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"websocket",children:["websocket",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#websocket",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"4.2.8 新增"})}),"\n",(0,t.jsxs)(n.div,{className:"rspress-directive tip",children:[(0,t.jsx)(n.div,{className:"rspress-directive-title",children:"稳定性: 稳定"}),(0,t.jsx)(n.div,{className:"rspress-directive-content",children:"\n"})]}),"\n",(0,t.jsxs)(n.p,{children:["websocket 模块，采用 okhttp3 实现，本模块中包含了 okhttp3 核心所有的类，下面讲解其基本的使用方法，更多的使用规则,可参考：(",(0,t.jsx)(n.a,{href:"https://square.github.io/okhttp/)%EF%BC%8C%E8%BF%99%E9%87%8C%E6%B6%89%E5%8F%8A%E4%B8%80%E4%BA%9B%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98%EF%BC%8C%E8%AF%B7%E5%AD%A6%E4%B9%A0%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%8C%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%AD%89%E5%86%85%E5%AE%B9%E3%80%82",target:"_blank",rel:"noopener noreferrer",children:"https://square.github.io/okhttp/)，这里涉及一些线程安全问题，请学习多线程，生命周期等内容。"})]}),"\n",(0,t.jsxs)(n.h2,{id:"创建-websocket-客户端",children:["创建 websocket 客户端",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#创建-websocket-客户端",children:"#"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"创建一个 http client，可以设定 client 是否重连，心跳等功能"}),"\n",(0,t.jsx)(n.li,{children:"创建一个 request 请求对象，采用什么协议 ws 或 wss 、服务器、端口都能内容"}),"\n",(0,t.jsx)(n.li,{children:"设置监听，当 websocket 生命周期内的一些事情。"}),"\n",(0,t.jsx)(n.li,{children:"设置上面的操作以后，打开链接，创建 webSocket 客户端。"}),"\n",(0,t.jsxs)(n.li,{children:["用 webSocket 客户端 发送消息 ",(0,t.jsx)(n.code,{children:'webSocket.send("你好服务器")'}),";"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'importPackage(Packages["okhttp3"]); //导入包\nvar client = new OkHttpClient.Builder().retryOnConnectionFailure(true).build();\nvar request = new Request.Builder().url("ws://192.168.31.164:9317").build(); //vscode  插件的ip地址，\nclient.dispatcher().cancelAll(); //清理一次\nmyListener = {\n    onOpen: function (webSocket, response) {\n        print("onOpen");\n        //打开链接后，想服务器端发送一条消息\n        var json = {};\n        json.type = "hello";\n        json.data = { device_name: "模拟设备", client_version: 123, app_version: 123, app_version_code: "233" };\n        var hello = JSON.stringify(json);\n        webSocket.send(hello);\n    },\n    onMessage: function (webSocket, msg) {\n        //msg可能是字符串，也可能是byte数组，取决于服务器送的内容\n        print("msg");\n        print(msg);\n    },\n    onClosing: function (webSocket, code, response) {\n        print("正在关闭");\n    },\n    onClosed: function (webSocket, code, response) {\n        print("已关闭");\n    },\n    onFailure: function (webSocket, t, response) {\n        print("错误");\n        print(t);\n    },\n};\n\nvar webSocket = client.newWebSocket(request, new WebSocketListener(myListener)); //创建链接\n\nsetInterval(() => {\n    // 防止主线程退出\n}, 1000);\n'})}),"\n",(0,t.jsx)(n.p,{children:"创建 websocket 服务器端，一样支持，可以参考 okhttp 官网。"})]})}function c(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(i,{...e})}):i(e)}let o=c;c.__RSPRESS_PAGE_META={},c.__RSPRESS_PAGE_META["v1%2F%E5%9F%BA%E7%A1%80%2Fwebsocket.md"]={toc:[{text:"创建 websocket 客户端",id:"创建-websocket-客户端",depth:2}],title:"websocket",headingTitle:"websocket",frontmatter:{}}}}]);