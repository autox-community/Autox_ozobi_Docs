"use strict";(self.webpackChunkrepress_demo=self.webpackChunkrepress_demo||[]).push([["9177"],{7641:function(n,e,t){t.r(e),t.d(e,{default:()=>i});var s=t(2676),o=t(453);function r(n){let e=Object.assign({h1:"h1",a:"a",p:"p",code:"code",div:"div",h2:"h2",blockquote:"blockquote",pre:"pre"},(0,o.ah)(),n.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.h1,{id:"mqtt",children:["MQTT",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#mqtt",children:"#"})]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.code,{children:"6.5.9 新增"})}),"\n",(0,s.jsxs)(e.div,{className:"rspress-directive tip",children:[(0,s.jsx)(e.div,{className:"rspress-directive-title",children:"稳定性: 稳定"}),(0,s.jsx)(e.div,{className:"rspress-directive-content",children:"\n"})]}),"\n",(0,s.jsxs)(e.p,{children:["MQTT 模块，采用",(0,s.jsx)(e.a,{href:"https://github.com/eclipse/paho.mqtt.java",target:"_blank",rel:"noopener noreferrer",children:"org.eclipse.paho.client.mqttv3"}),"实现"]}),"\n",(0,s.jsxs)(e.h2,{id:"代码示例",children:["代码示例",(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#代码示例",children:"#"})]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"主题订阅、发布、QOS、遗嘱消息"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:'importPackage(Packages["org.eclipse.paho.client.mqttv3"]);\nimportClass("org.eclipse.paho.android.service.MqttAndroidClient");\n\n// 连接、订阅配置\nconst MQTT_URL = "tcp://192.168.20.225:1883";\nconst CLIENT_ID = "MOCK";\nconst TOPIC = "ANDROID_MOCK";\nconst QOS = 2;\nconst USERNAME = "device";\nconst PASSWORD = "public";\n\nconst client = new MqttAndroidClient(context, MQTT_URL, CLIENT_ID);\nconst subscribeToTopic = () => {\n    try {\n        client.subscribe(\n            TOPIC,\n            QOS,\n            null,\n            new IMqttActionListener({\n                onSuccess: (token) => {\n                    toast("MQTT 订阅成功");\n                },\n                onFailure: (token, error) => {\n                    toast("MQTT 订阅失败 " + error);\n                },\n            })\n        );\n    } catch (error) {\n        toast(error.message);\n        alert(\'MQTT订阅错误\\n\\n"\' + error.message);\n    }\n};\n\nconst initMQTT = () => {\n    // 创建配置\n    const mqttConnectOptions = new MqttConnectOptions();\n    mqttConnectOptions.setAutomaticReconnect(true);\n    mqttConnectOptions.setCleanSession(true);\n    mqttConnectOptions.setUserName(USERNAME);\n    mqttConnectOptions.setPassword(Array.from(PASSWORD));\n    // 遗嘱消息 QOS = 1, retained = true\n    let willMsgJavaString = new java.lang.String("i am gone");\n    let willMsgJavaBytes = willMsgJavaString.getBytes("UTF-8");\n    mqttConnectOptions.setWill("device-gone", willMsgJavaBytes, 1, true);\n\n    console.log("mqttConnectOptions", mqttConnectOptions);\n\n    const callback = new MqttCallbackExtended({\n        connectComplete: (reconnect, serverUri) => {\n            if (reconnect) {\n                subscribeToTopic();\n                console.log("重新连接到MQTT");\n            } else {\n                console.log("连接到MQTT");\n            }\n        },\n        connectionLost: () => {\n            console.log("MQTT 连接丢失");\n        },\n        messageArrived: (topic, message) => {\n            console.log("MQTT MESSAGE: ", topic, message);\n        },\n    });\n    client.setCallback(callback);\n\n    client.connect(\n        mqttConnectOptions,\n        null,\n        new IMqttActionListener({\n            onSuccess: () => {\n                console.log("mqtt连接成功");\n                subscribeToTopic();\n            },\n            onFailure: (token, error) => {\n                console.error("mqtt连接失败", error);\n                exit();\n            },\n        })\n    );\n};\n\nconst publish = (topic, msg, qos = 1, retained = false) => {\n    // publish message\n    try {\n        let javaString = new java.lang.String(msg);\n        let byteArray = javaString.getBytes("UTF-8");\n        client.publish(topic, byteArray, qos, retained);\n    } catch (error) {\n        console.error("MQTT 发布失败", error);\n    }\n};\n\n// 连接\ninitMQTT();\nsetTimeout(() => {\n    toast("7秒后自动关闭");\n    // send message\n    publish(TOPIC, "hello");\n}, 3000);\n// 断开并退出\nsetTimeout(() => {\n    client.close();\n    client.disconnect();\n    toast("自动关闭并退出脚本");\n    exit();\n}, 10 * 1000);\n\n// 防止进程退出\nsetInterval(() => {\n    //\n}, 1000);\n'})})]})}function c(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,o.ah)(),n.components);return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(r,{...n})}):r(n)}let i=c;c.__RSPRESS_PAGE_META={},c.__RSPRESS_PAGE_META["v1%2F%E5%9F%BA%E7%A1%80%2Fmqtt.md"]={toc:[{text:"代码示例",id:"代码示例",depth:2}],title:"MQTT",headingTitle:"MQTT",frontmatter:{}}}}]);