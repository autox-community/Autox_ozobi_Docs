"use strict";(self.webpackChunkrepress_demo=self.webpackChunkrepress_demo||[]).push([["3441"],{4731:function(e,n,i){i.r(n),i.d(n,{default:()=>l});var r=i(2676),t=i(453);function s(e){let n=Object.assign({h1:"h1",a:"a",p:"p",strong:"strong",code:"code",pre:"pre",ul:"ul",li:"li"},(0,t.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"列表-list",children:["列表: list",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#列表-list",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"官方教程："})}),"\n",(0,r.jsxs)(n.p,{children:["参见 Android ",(0,r.jsx)(n.a,{href:"https://developer.android.google.cn/reference/androidx/recyclerview/widget/RecyclerView",target:"_blank",rel:"noopener noreferrer",children:"RecyclerView"})]}),"\n",(0,r.jsxs)(n.p,{children:["事件:",(0,r.jsx)(n.code,{children:" item_click"}),":"]}),"\n",(0,r.jsx)(n.p,{children:"当用户点击一个 List 中的项时会触发该事件。"}),"\n",(0,r.jsx)(n.p,{children:"例子："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'"ui";\r\n$ui.layout(\r\n    <frame>\r\n        <list id="list">\r\n            <vertical>\r\n                <text id="name" textSize="16sp" textColor="#000000" text="姓名: {{name}}" />\r\n                <text id="age" textSize="16sp" textColor="#000000" text="年龄: {{age}}岁" />\r\n            </vertical>\r\n        </list>\r\n    </frame>\r\n);\r\nvar items = [\r\n    {\r\n        name: "小明",\r\n        age: 18,\r\n    },\r\n    {\r\n        name: "小红",\r\n        age: 30,\r\n    },\r\n];\r\n$ui.list.setDataSource(items);\r\n$ui.list.on("item_click", function (item, i, itemView, listView) {\r\n    toast("被点击的人名字为: " + item.name + "，年龄为: " + item.age);\r\n});\n'})}),"\n",(0,r.jsxs)(n.p,{children:["事件:",(0,r.jsx)(n.code,{children:" item_click"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"item"})," {any} 被点击的列表项的数据"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"i"})," {number} 被点击的列表项的位置"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"itemView"})," {View} 被点击的列表项的 View"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"listView"})," {View} 当前列表控件"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"当用户点击一个 List 中的项时会触发该事件。"}),"\n",(0,r.jsx)(n.p,{children:"例子："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'"ui";\r\n$ui.layout(\r\n    <frame>\r\n        <list id="list">\r\n            <vertical>\r\n                <text id="name" textSize="16sp" textColor="#000000" text="姓名: {{name}}" />\r\n                <text id="age" textSize="16sp" textColor="#000000" text="年龄: {{age}}岁" />\r\n            </vertical>\r\n        </list>\r\n    </frame>\r\n);\r\nvar items = [\r\n    {\r\n        name: "小明",\r\n        age: 18,\r\n    },\r\n    {\r\n        name: "小红",\r\n        age: 30,\r\n    },\r\n];\r\n$ui.list.setDataSource(items);\r\n$ui.list.on("item_click", function (item, i, itemView, listView) {\r\n    toast("被点击的人名字为: " + item.name + "，年龄为: " + item.age);\r\n});\n'})}),"\n",(0,r.jsxs)(n.p,{children:["事件: ",(0,r.jsx)(n.code,{children:"item_long_click"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"event"}),"{object} 事件，字段有：","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"consumed"})," {boolean} 设置此事件是否被消费"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"view"})," {View} 此事件对应的 View"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"item"})," {any} 被点击的列表项的数据"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"i"})," {number} 被点击的列表项的位置"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"itemView"})," {View} 被点击的列表项的 View"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"listView"})," {View} 当前列表控件"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"当用户长按一个 List 中的项时会触发该事件。"}),"\n",(0,r.jsxs)(n.p,{children:["事件: ",(0,r.jsx)(n.code,{children:"item_bind"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"itemView"})," {View} 当前列表项的 View"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"itemHolder"}),"{object} 当前列表项的管理对象，可动态获取列表项的位置和数据。","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"item"})," {any} 获取列表项的数据"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"position"})," {number} 获取列表项的位置"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"当列表创建一个新的列表项的 View 时触发该事件。实际上列表控件不会为列表控件的每个项目创建一个单独的 View，假设列表为 2000 个，屏幕最多显示 10 个，那么列表控件只会创建 10 个左右的 View。"}),"\n",(0,r.jsx)(n.p,{children:"这个事件通常用于对列表项的 View 设置事件回调，比如："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'"ui";\r\n$ui.layout(\r\n    <frame>\r\n        <list id="list">\r\n            <vertical>\r\n                <text id="name" textSize="16sp" textColor="#000000" text="姓名: {{this.name}}" />\r\n                <checkbox id="checkbox" checked="{{this.checked}}" />\r\n            </vertical>\r\n        </list>\r\n    </frame>\r\n);\r\nvar items = [\r\n    {\r\n        name: "小明",\r\n        checked: false,\r\n    },\r\n    {\r\n        name: "小红",\r\n        checked: false,\r\n    },\r\n];\r\n$ui.list.setDataSource(items);\r\n\r\n$ui.list.on("item_bind", function (itemView, itemHolder) {\r\n    itemView.checkbox.on("check", function (checked) {\r\n        let item = itemHolder.item;\r\n        item.checked = checked;\r\n        console.log(item);\r\n    });\r\n});\n'})}),"\n",(0,r.jsxs)(n.p,{children:["事件: ",(0,r.jsx)(n.code,{children:"item_data_bind"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"itemView"})," {View} 当前列表项的 View"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"itemHolder"}),"{object} 当前列表项的管理对象，可获取列表项的位置和数据。","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"item"})," {any} 获取列表项的数据"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"position"})," {number} 获取列表项的位置"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"当列表将一个列表项的数据绑定到列表项的 View 时触发该事件。"}),"\n",(0,r.jsx)(n.p,{children:"例子:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'"ui";\r\n$ui.layout(\r\n    <frame>\r\n        <list id="list">\r\n            <vertical>\r\n                <text id="name" textSize="16sp" textColor="#000000" text="姓名: {{this.name}}" />\r\n                <checkbox id="checkbox" checked="{{this.checked}}" />\r\n            </vertical>\r\n        </list>\r\n    </frame>\r\n);\r\nvar items = [\r\n    {\r\n        name: "小明",\r\n        checked: false,\r\n    },\r\n    {\r\n        name: "小红",\r\n        checked: false,\r\n    },\r\n];\r\n$ui.list.setDataSource(items);\r\n\r\n$ui.list.on("item_data_bind", function (itemView, itemHolder) {\r\n    let item = itemHolder.item;\r\n    itemView.name.setTextColor(item.checked ? $colors.RED : $colors.BLACK);\r\n});\r\n\r\n$ui.list.on("item_bind", function (itemView, itemHolder) {\r\n    itemView.checkbox.on("check", function (checked) {\r\n        let item = itemHolder.item;\r\n        item.checked = checked;\r\n        $ui.list.getAdapter().notifyItemChanged(itemHolder.position);\r\n    });\r\n});\n'})})]})}function c(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}let l=c;c.__RSPRESS_PAGE_META={},c.__RSPRESS_PAGE_META["v1%2F%E5%9F%BA%E7%A1%80%2Fui%2Flist.md"]={toc:[],title:"列表: list",headingTitle:"列表: list",frontmatter:{}}}}]);