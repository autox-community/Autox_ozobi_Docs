"use strict";(self.webpackChunkrepress_demo=self.webpackChunkrepress_demo||[]).push([["2125"],{4658:function(e,n,r){r.r(n),r.d(n,{default:()=>c});var i=r(2676),s=r(453);function l(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",ul:"ul",li:"li",code:"code",p:"p",pre:"pre",ol:"ol",strong:"strong"},(0,s.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h1,{id:"找图找色",children:["找图找色",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#找图找色",children:"#"})]}),"\n",(0,i.jsxs)(n.h2,{id:"imagesrequestscreencapturelandscape",children:["images.requestScreenCapture([landscape])",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#imagesrequestscreencapturelandscape",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"landscape"})," {boolean} 截屏方向","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"true"})," 横屏截图"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"false"})," 竖屏截图"]}),"\n",(0,i.jsx)(n.li,{children:"不指定值，由当前设备屏幕方向决定截图方向"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"return"})," {boolean}"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"向系统申请屏幕截图权限，返回是否请求成功,仅需执行一次"}),"\n",(0,i.jsx)(n.p,{children:"建议在本软件界面运行该函数，在其他软件界面运行时容易出现一闪而过的黑屏现象。"}),"\n",(0,i.jsx)(n.p,{children:"示例:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'//请求截图\r\n//每次使用该函数都会弹出截图权限请求，建议选择“总是允许”。\r\nif (!requestScreenCapture()) {\r\n    toast("请求截图失败");\r\n    exit();\r\n}\r\n//连续截图 10 张图片(间隔 1 秒)并保存到存储卡目录\r\nfor (var i = 0; i < 10; i++) {\r\n    captureScreen("/sdcard/screencapture" + i + ".png");\r\n    sleep(1000);\r\n}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'//安卓版本高于Android 9\r\nif (device.sdkInt > 28) {\r\n    //等待截屏权限申请并同意\r\n    threads.start(function () {\r\n        packageName("com.android.systemui").text("立即开始").waitFor();\r\n        text("立即开始").click();\r\n    });\r\n}\r\n//申请截屏权限\r\nif (!requestScreenCapture()) {\r\n    toast("请求截图失败");\r\n    exit();\r\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"该函数也可以作为全局函数使用。"}),"\n",(0,i.jsxs)(n.h2,{id:"imagescapturescreen",children:["images.captureScreen()",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#imagescapturescreen",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"return"})," {Image}"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"截取当前屏幕并返回一个 Image 对象。"}),"\n",(0,i.jsx)(n.p,{children:"没有截图权限时执行该函数会抛出 SecurityException。"}),"\n",(0,i.jsx)(n.p,{children:"该函数不会返回 null，两次调用可能返回相同的 Image 对象。这是因为设备截图的更新需要一定的时间，短时间内（一般来说是 16ms）连续调用则会返回同一张截图。"}),"\n",(0,i.jsx)(n.p,{children:"截图需要转换为 Bitmap 格式，从而该函数执行需要一定的时间(0~20ms)。"}),"\n",(0,i.jsx)(n.p,{children:"另外在 requestScreenCapture()执行成功后需要一定时间后才有截图可用，因此如果立即调用 captureScreen()，会等待一定时间后(一般为几百 ms)才返回截图。"}),"\n",(0,i.jsx)(n.p,{children:"例子:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"//请求横屏截图\r\nrequestScreenCapture(true);\r\n//截图\r\nvar img = captureScreen();\r\n//获取在点(100, 100)的颜色值\r\nvar color = images.pixel(img, 100, 100);\r\n//显示该颜色值\r\ntoast(colors.toString(color));\n"})}),"\n",(0,i.jsx)(n.p,{children:"该函数也可以作为全局函数使用。"}),"\n",(0,i.jsxs)(n.h2,{id:"imagescapturescreenpath",children:["images.captureScreen(path)",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#imagescapturescreenpath",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"path"})," {string} 截图保存路径"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"截取当前屏幕并以 PNG 格式保存到 path 中。如果文件不存在会被创建；文件存在会被覆盖。"}),"\n",(0,i.jsx)(n.p,{children:"该函数不会返回任何值。该函数也可以作为全局函数使用。"}),"\n",(0,i.jsxs)(n.h2,{id:"imagespixelimage-x-y",children:["images.pixel(image, x, y)",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#imagespixelimage-x-y",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"image"})," {Image} 图片"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"x"})," {number} 要获取的像素的横坐标。"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"y"})," {number} 要获取的像素的纵坐标。"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"返回图片 image 在点(x, y)处的像素的 ARGB 值。"}),"\n",(0,i.jsx)(n.p,{children:'该值的格式为 0xAARRGGBB，是一个"32 位整数"(虽然 JavaScript 中并不区分整数类型和其他数值类型)。'}),"\n",(0,i.jsx)(n.p,{children:"坐标系以图片左上角为原点。以图片左侧边为 y 轴，上侧边为 x 轴。"}),"\n",(0,i.jsxs)(n.h2,{id:"imagesreadpixelspath",children:["images.readPixels(path)",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#imagesreadpixelspath",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"path"})," {string} 图片的地址"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"return"})," {Object} 包括图片的像素数据和宽高，{data,width,height}"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"读取图片的像素数据和宽高。"}),"\n",(0,i.jsxs)(n.h2,{id:"imagesfindcolorimage-color-options",children:["images.findColor(image, color, options)",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#imagesfindcolorimage-color-options",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"image"})," {Image} 图片"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"color"}),' {number} | {string} 要寻找的颜色的 RGB 值。如果是一个整数，则以 0xRRGGBB 的形式代表 RGB 值（A 通道会被忽略）；如果是字符串，则以"#RRGGBB"代表其 RGB 值。']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"options"})," {Object} 选项包括：","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"region"})," {Array} 找色区域。是一个两个或四个元素的数组。(region[0], region[1])表示找色区域的左上角；region[2]*region[3]表示找色区域的宽高。如果只有 region 只有两个元素，则找色区域为(region[0], region[1])到屏幕右下角。如果不指定 region 选项，则找色区域为整张图片。"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"threshold"})," {number} 找色时颜色相似度的临界值，范围为 0~255（越小越相似，0 为颜色相等，255 为任何颜色都能匹配）。默认为 4。threshold 和浮点数相似度(0.0~1.0)的换算为 similarity = (255 - threshold) / 255."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"在图片中寻找颜色 color。找到时返回找到的点 Point，找不到时返回 null。"}),"\n",(0,i.jsx)(n.p,{children:"该函数也可以作为全局函数使用。"}),"\n",(0,i.jsx)(n.p,{children:"一个循环找色的例子如下："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'requestScreenCapture();\r\n\r\n//循环找色，找到红色(#ff0000)时停止并报告坐标\r\nwhile (true) {\r\n    var img = captureScreen();\r\n    var point = findColor(img, "#ff0000");\r\n    if (point) {\r\n        toast("找到红色，坐标为(" + point.x + ", " + point.y + ")");\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"一个区域找色的例子如下："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'//读取本地图片/sdcard/1.png\r\nvar img = images.read("/sdcard/1.png");\r\n//判断图片是否加载成功\r\nif (!img) {\r\n    toast("没有该图片");\r\n    exit();\r\n}\r\n//在该图片中找色，指定找色区域为在位置(400, 500)的宽为300长为200的区域，指定找色临界值为4\r\nvar point = findColor(img, "#00ff00", {\r\n    region: [400, 500, 300, 200],\r\n    threshold: 4,\r\n});\r\nif (point) {\r\n    toast("找到啦:" + point);\r\n} else {\r\n    toast("没找到");\r\n}\n'})}),"\n",(0,i.jsxs)(n.h2,{id:"imagesfindcolorinregionimg-color-x-y-width-height-threshold",children:["images.findColorInRegion(img, color, x, y[, width, height, threshold])",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#imagesfindcolorinregionimg-color-x-y-width-height-threshold",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"区域找色的简便方法。"}),"\n",(0,i.jsx)(n.p,{children:"相当于"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"images.findColor(img, color, {\r\n    region: [x, y, width, height],\r\n    threshold: threshold,\r\n});\n"})}),"\n",(0,i.jsx)(n.p,{children:"该函数也可以作为全局函数使用。"}),"\n",(0,i.jsxs)(n.h2,{id:"imagesfindcolorequalsimg-color-x-y-width-height",children:["images.findColorEquals(img, color[, x, y, width, height])",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#imagesfindcolorequalsimg-color-x-y-width-height",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"img"})," {Image} 图片"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"color"})," {number} | {string} 要寻找的颜色"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"x"})," {number} 找色区域的左上角横坐标"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"y"})," {number} 找色区域的左上角纵坐标"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"width"})," {number} 找色区域的宽度"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"height"})," {number} 找色区域的高度"]}),"\n",(0,i.jsx)(n.li,{children:"返回 {Point}"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["在图片 img 指定区域中找到颜色和 color 完全相等的某个点，并返回该点的左边；如果没有找到，则返回",(0,i.jsx)(n.code,{children:"null"}),"。"]}),"\n",(0,i.jsxs)(n.p,{children:["找色区域通过",(0,i.jsx)(n.code,{children:"x"}),", ",(0,i.jsx)(n.code,{children:"y"}),", ",(0,i.jsx)(n.code,{children:"width"}),", ",(0,i.jsx)(n.code,{children:"height"}),"指定，如果不指定找色区域，则在整张图片中寻找。"]}),"\n",(0,i.jsx)(n.p,{children:"该函数也可以作为全局函数使用。"}),"\n",(0,i.jsx)(n.p,{children:"示例：\r\n(通过找 QQ 红点的颜色来判断是否有未读消息)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'requestScreenCapture();\r\nlaunchApp("QQ");\r\nsleep(1200);\r\nvar p = findColorEquals(captureScreen(), "#f64d30");\r\nif (p) {\r\n    toast("有未读消息");\r\n} else {\r\n    toast("没有未读消息");\r\n}\n'})}),"\n",(0,i.jsxs)(n.h2,{id:"imagesfindallpointsforcolorimg-color-options",children:["images.findAllPointsForColor(img, color, options)",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#imagesfindallpointsforcolorimg-color-options",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"img"})," {Image} 图片"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"color"})," {number | string} 要检测的颜色"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"options"})," {Object} 选项包括：","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"region"})," {Array} 找色区域。是一个两个或四个元素的数组。(region[0], region[1])表示找色区域的左上角；region[2]*region[3]表示找色区域的宽高。如果 ",(0,i.jsx)(n.code,{children:"region"}),"只有两个元素，则找色区域为(region[0], region[1])到图片右下角。如果不指定",(0,i.jsx)(n.code,{children:"region"}),"选项，则找色区域为整张图片。"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"similarity"})," {number} 找色时颜色相似度，范围为 0~1（越大越相似，1 为颜色相等，0 为任何颜色都能匹配）。"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"threshold"})," {number} 找色时颜色相似度的临界值，范围为 0 ~ 255（越小越相似，0 为颜色相等，255 为任何颜色都能匹配）。默认为 4。"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"similarity"}),"与",(0,i.jsx)(n.code,{children:"threshold"}),"的换算为",(0,i.jsx)(n.code,{children:"similarity"})," = (255 - ",(0,i.jsx)(n.code,{children:"threshold"}),") / 255 。二选一，同时存在则以",(0,i.jsx)(n.code,{children:"similarity"}),"为准。"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"return"})," {Array}"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["在图片中寻找所有颜色为",(0,i.jsx)(n.code,{children:"color"}),"的点。找到时返回找到的点 Point 的数组，找不到时返回",(0,i.jsx)(n.code,{children:"null"}),"。"]}),"\n",(0,i.jsx)(n.p,{children:"例如找出所有白色的点："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'log(images.findAllPointsForColor(img, "#ffffff"));\n'})}),"\n",(0,i.jsxs)(n.h2,{id:"imagesfindmulticolorsimg-firstcolor-colors-options",children:["images.findMultiColors(img, firstColor, colors[, options])",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#imagesfindmulticolorsimg-firstcolor-colors-options",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"img"})," {Image} 要找色的图片"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"firstColor"})," {number} | {string} 第一个点的颜色"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"colors"})," {Array} 表示剩下的点相对于第一个点的位置和颜色的数组，数组的每个元素为[x, y, color]"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"options"})," {Object} 选项，包括：","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"region"})," {Array} 找色区域。是一个两个或四个元素的数组。(region[0], region[1])表示找色区域的左上角；region[2]*region[3]表示找色区域的宽高。如果只有 region 只有两个元素，则找色区域为(region[0], region[1])到屏幕右下角。如果不指定 region 选项，则找色区域为整张图片。"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"threshold"})," {number} 找色时颜色相似度的临界值，范围为 0~255（越小越相似，0 为颜色相等，255 为任何颜色都能匹配）。默认为 4。threshold 和浮点数相似度(0.0~1.0)的换算为 similarity = (255 - threshold) / 255."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"多点找色，类似于按键精灵的多点找色，其过程如下："}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"在图片 img 中找到颜色 firstColor 的位置(x0, y0)"}),"\n",(0,i.jsx)(n.li,{children:"对于数组 colors 的每个元素[x, y, color]，检查图片 img 在位置(x + x0, y + y0)上的像素是否是颜色 color，是的话返回(x0, y0)，否则继续寻找 firstColor 的位置，重新执行第 1 步"}),"\n",(0,i.jsxs)(n.li,{children:["整张图片都找不到时返回",(0,i.jsx)(n.code,{children:"null"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["例如，对于代码",(0,i.jsx)(n.code,{children:'images.findMultiColors(img, "#123456", [[10, 20, "#ffffff"], [30, 40, "#000000"]])'}),"，假设图片在(100, 200)的位置的颜色为#123456, 这时如果(110, 220)的位置的颜色为#fffff 且(130, 240)的位置的颜色为#000000，则函数返回点(100, 200)。"]}),"\n",(0,i.jsx)(n.p,{children:"如果要指定找色区域，则在 options 中指定，例如:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'var p = images.findMultiColors(\r\n    img,\r\n    "#123456",\r\n    [\r\n        [10, 20, "#ffffff"],\r\n        [30, 40, "#000000"],\r\n    ],\r\n    {\r\n        region: [0, 960, 1080, 960],\r\n    }\r\n);\n'})}),"\n",(0,i.jsxs)(n.h2,{id:"imagesdetectscolorimage-color-x-y-threshold--16-algorithm--diff",children:['images.detectsColor(image, color, x, y[, threshold = 16, algorithm = "diff"])',(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#imagesdetectscolorimage-color-x-y-threshold--16-algorithm--diff",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"image"})," {Image} 图片"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"color"})," {number} | {string} 要检测的颜色"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"x"})," {number} 要检测的位置横坐标"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"y"})," {number} 要检测的位置纵坐标"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"threshold"})," {number} 颜色相似度临界值，默认为 16。取值范围为 0~255。"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"algorithm"})," {string} 颜色匹配算法，包括:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:'"equal": 相等匹配，只有与给定颜色 color 完全相等时才匹配。'}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:'"diff": 差值匹配。与给定颜色的 R、G、B 差的绝对值之和小于 threshold 时匹配。'}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:'"rgb": rgb 欧拉距离相似度。与给定颜色 color 的 rgb 欧拉距离小于等于 threshold 时匹配。'}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:['"rgb+": 加权 rgb 欧拉距离匹配(',(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Color_difference",target:"_blank",rel:"noopener noreferrer",children:"LAB Delta E"}),")。"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:'"hs": hs 欧拉距离匹配。hs 为 HSV 空间的色调值。'}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"返回图片 image 在位置(x, y)处是否匹配到颜色 color。用于检测图片中某个位置是否是特定颜色。"}),"\n",(0,i.jsx)(n.p,{children:"一个判断微博客户端的某个微博是否被点赞过的例子："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'requestScreenCapture();\r\n//找到点赞控件\r\nvar like = id("ly_feed_like_icon").findOne();\r\n//获取该控件中点坐标\r\nvar x = like.bounds().centerX();\r\nvar y = like.bounds().centerY();\r\n//截图\r\nvar img = captureScreen();\r\n//判断在该坐标的颜色是否为橙红色\r\nif (images.detectsColor(img, "#fed9a8", x, y)) {\r\n    //是的话则已经是点赞过的了，不做任何动作\r\n} else {\r\n    //否则点击点赞按钮\r\n    like.click();\r\n}\n'})}),"\n",(0,i.jsxs)(n.h2,{id:"imagesfindimageimg-template-options",children:["images.findImage(img, template[, options])",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#imagesfindimageimg-template-options",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"img"})," {Image} 大图片"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"template"})," {Image} 小图片（模板）"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"options"})," {Object} 选项包括：","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"threshold"})," {number} 图片相似度。取值范围为 0~1 的浮点数。默认值为 0.9。"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"region"})," {Array} 找图区域。参见 findColor 函数关于 region 的说明。"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"level"})," {number} ",(0,i.jsx)(n.strong,{children:"一般而言不必修改此参数"}),"。不加此参数时该参数会根据图片大小自动调整。找图算法是采用图像金字塔进行的, level 参数表示金字塔的层次, level 越大可能带来越高的找图效率，但也可能造成找图失败（图片因过度缩小而无法分辨）或返回错误位置。因此，除非您清楚该参数的意义并需要进行性能调优，否则不需要用到该参数。"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"找图。在大图片 img 中查找小图片 template 的位置（模块匹配），找到时返回位置坐标(Point)，找不到时返回 null。"}),"\n",(0,i.jsx)(n.p,{children:"该函数也可以作为全局函数使用。"}),"\n",(0,i.jsx)(n.p,{children:"一个最简单的找图例子如下："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'var img = images.read("/sdcard/大图.png");\r\nvar templ = images.read("/sdcard/小图.png");\r\nvar p = findImage(img, templ);\r\nif (p) {\r\n    toast("找到啦:" + p);\r\n} else {\r\n    toast("没找到");\r\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"稍微复杂点的区域找图例子如下："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'auto();\r\nrequestScreenCapture();\r\nvar wx = images.read("/sdcard/微信图标.png");\r\n//返回桌面\r\nhome();\r\n//截图并找图\r\nvar p = findImage(captureScreen(), wx, {\r\n    region: [0, 50],\r\n    threshold: 0.8,\r\n});\r\nif (p) {\r\n    toast("在桌面找到了微信图标啦: " + p);\r\n} else {\r\n    toast("在桌面没有找到微信图标");\r\n}\n'})}),"\n",(0,i.jsxs)(n.h2,{id:"imagesfindimageinregionimg-template-x-y-width-height-threshold",children:["images.findImageInRegion(img, template, x, y[, width, height, threshold])",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#imagesfindimageinregionimg-template-x-y-width-height-threshold",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"区域找图的简便方法。相当于："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"images.findImage(img, template, {\r\n    region: [x, y, width, height],\r\n    threshold: threshold,\r\n});\n"})}),"\n",(0,i.jsx)(n.p,{children:"该函数也可以作为全局函数使用。"}),"\n",(0,i.jsxs)(n.h2,{id:"imagesmatchtemplateimg-template-options",children:["images.matchTemplate(img, template, options)",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#imagesmatchtemplateimg-template-options",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"[v4.1.0 新增]"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"img"})," {Image} 大图片"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"template"})," {Image} 小图片（模板）"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"options"})," {Object} 找图选项：","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"threshold"})," {number} 图片相似度。取值范围为 0~1 的浮点数。默认值为 0.9。"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"region"})," {Array} 找图区域。参见 findColor 函数关于 region 的说明。"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"max"})," {number} 找图结果最大数量，默认为 5"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"level"})," {number} ",(0,i.jsx)(n.strong,{children:"一般而言不必修改此参数"}),"。不加此参数时该参数会根据图片大小自动调整。找图算法是采用图像金字塔进行的, level 参数表示金字塔的层次, level 越大可能带来越高的找图效率，但也可能造成找图失败（图片因过度缩小而无法分辨）或返回错误位置。因此，除非您清楚该参数的意义并需要进行性能调优，否则不需要用到该参数。"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"返回 {MatchingResult}"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"在大图片中搜索小图片，并返回搜索结果 MatchingResult。该函数可以用于找图时找出多个位置，可以通过 max 参数控制最大的结果数量。也可以对匹配结果进行排序、求最值等操作。"}),"\n",(0,i.jsxs)(n.h2,{id:"imagesfindcirclesgray-options",children:["images.findCircles(gray, options)",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#imagesfindcirclesgray-options",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"gray"})," {Image} 灰度图片"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"options"})," {Object} 选项包括：","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"region"})," {Array} 找圆区域。是一个两个或四个元素的数组。(region[0], region[1])表示找圆区域的左上角；region[2]*region[3]表示找圆区域的宽高。如果只有 region 只有两个元素，则找圆区域为(region[0], region[1])到图片右下角。如果不指定",(0,i.jsx)(n.code,{children:"region"}),"选项，则找圆区域为整张图片。"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"dp"})," {number} dp 是累加面与原始图像相比的分辨率的反比参数，dp=2 时累计面分辨率是元素图像的一半，宽高都缩减为原来的一半，dp=1 时，两者相同。默认为 1。"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"minDst"})," {number} minDist 定义了两个圆心之间的最小距离。默认为图片高度的八分之一。"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"param1"})," {number} param1 是 Canny 边缘检测的高阈值，低阈值被自动置为高阈值的一半。默认为 100，范围为 0-255。"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"param2"})," {number} param2 是累加平面对是否是圆的判定阈值，默认为 100。"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"minRadius"})," {number} 定义了检测到的圆的半径的最小值，默认为 0。"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"maxRadius"})," {number} 定义了检测到的圆的半径的最大值，0 为不限制最大值，默认为 0。"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"return"})," {Array}"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"在图片中寻找圆（做霍夫圆变换）。找到时返回找到的所有圆{x,y,radius}的数组，找不到时返回 null。"}),"\n",(0,i.jsx)(n.p,{children:"一个寻找圆的例子："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// 请求截图\r\nrequestScreenCapture();\r\n// 截图\r\nlet img = captureScreen();\r\n// 灰度化图片\r\nlet gray = images.grayscale(img);\r\n// 找圆\r\nlet arr = findCircles(gray, {\r\n    dp: 1,\r\n    minDst: 80,\r\n    param1: 100,\r\n    param2: 100,\r\n    minRadius: 50,\r\n    maxRadius: 80,\r\n});\r\n// 回收图片\r\ngray.recycle();\n"})})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}let c=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["v1%2F%E9%AB%98%E7%BA%A7%2Fimages%2FfindColorOrImage.md"]={toc:[{text:"images.requestScreenCapture([landscape])",id:"imagesrequestscreencapturelandscape",depth:2},{text:"images.captureScreen()",id:"imagescapturescreen",depth:2},{text:"images.captureScreen(path)",id:"imagescapturescreenpath",depth:2},{text:"images.pixel(image, x, y)",id:"imagespixelimage-x-y",depth:2},{text:"images.readPixels(path)",id:"imagesreadpixelspath",depth:2},{text:"images.findColor(image, color, options)",id:"imagesfindcolorimage-color-options",depth:2},{text:"images.findColorInRegion(img, color, x, y[, width, height, threshold])",id:"imagesfindcolorinregionimg-color-x-y-width-height-threshold",depth:2},{text:"images.findColorEquals(img, color[, x, y, width, height])",id:"imagesfindcolorequalsimg-color-x-y-width-height",depth:2},{text:"images.findAllPointsForColor(img, color, options)",id:"imagesfindallpointsforcolorimg-color-options",depth:2},{text:"images.findMultiColors(img, firstColor, colors[, options])",id:"imagesfindmulticolorsimg-firstcolor-colors-options",depth:2},{text:'images.detectsColor(image, color, x, y[, threshold = 16, algorithm = "diff"])',id:"imagesdetectscolorimage-color-x-y-threshold--16-algorithm--diff",depth:2},{text:"images.findImage(img, template[, options])",id:"imagesfindimageimg-template-options",depth:2},{text:"images.findImageInRegion(img, template, x, y[, width, height, threshold])",id:"imagesfindimageinregionimg-template-x-y-width-height-threshold",depth:2},{text:"images.matchTemplate(img, template, options)",id:"imagesmatchtemplateimg-template-options",depth:2},{text:"images.findCircles(gray, options)",id:"imagesfindcirclesgray-options",depth:2}],title:"找图找色",headingTitle:"找图找色",frontmatter:{}}}}]);