"use strict";(self.webpackChunkrepress_demo=self.webpackChunkrepress_demo||[]).push([["2814"],{5600:function(e,t,n){n.r(t),n.d(t,{default:()=>a});var i=n(2676),h=n(453);function l(e){let t=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",code:"code",pre:"pre"},(0,h.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.h1,{id:"垂直布局-vertical",children:["垂直布局: vertical",(0,i.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#垂直布局-vertical",children:"#"})]}),"\n",(0,i.jsx)(t.p,{children:"垂直布局是一种比较简单的布局，会把在它里面的控件按照垂直方向依次摆放，如下图所示："}),"\n",(0,i.jsx)(t.p,{children:"垂直布局:"}),"\n",(0,i.jsx)(t.p,{children:"—————"}),"\n",(0,i.jsx)(t.p,{children:"| 控件1 |"}),"\n",(0,i.jsx)(t.p,{children:"| 控件2 |"}),"\n",(0,i.jsx)(t.p,{children:"| 控件3 |"}),"\n",(0,i.jsx)(t.p,{children:"| ............ |"}),"\n",(0,i.jsx)(t.p,{children:"——————"}),"\n",(0,i.jsxs)(t.h2,{id:"layout_weight",children:["layout_weight",(0,i.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#layout_weight",children:"#"})]}),"\n",(0,i.jsxs)(t.p,{children:["垂直布局中的控件可以通过",(0,i.jsx)(t.code,{children:"layout_weight"}),"属性来控制控件高度占垂直布局高度的比例。如果为一个控件指定",(0,i.jsx)(t.code,{children:"layout_weight"}),', 则这个控件的高度=垂直布局剩余高度 * layout_weight / weightSum；如果不指定weightSum, 则weightSum为所有子控件的layout_weight之和。所谓"剩余高度"，指的是垂直布局中减去没有指定layout_weight的控件的剩余高度。\n例如:']}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'"ui";\nui.layout(\n    <vertical h="100dp">\n        <text layout_weight="1" text="控件1" bg="#ff0000"/>\n        <text layout_weight="1" text="控件2" bg="#00ff00"/>\n        <text layout_weight="1" text="控件3" bg="#0000ff"/>\n    </vertical>\n);\n'})}),"\n",(0,i.jsx)(t.p,{children:"在这个布局中，三个控件的layout_weight都是1，也就是他们的高度都会占垂直布局高度的1/3，都是33.3dp.\n再例如："}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'"ui";\nui.layout(\n    <vertical h="100dp">\n        <text layout_weight="1" text="控件1" bg="#ff0000"/>\n        <text layout_weight="2" text="控件2" bg="#00ff00"/>\n        <text layout_weight="1" text="控件3" bg="#0000ff"/>\n    </vertical>\n);\n'})}),"\n",(0,i.jsx)(t.p,{children:"在这个布局中，第一个控件高度为1/4, 第二个控件为2/4, 第三个控件为1/4.\n再例如："}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'"ui";\nui.layout(\n    <vertical h="100dp" weightSum="5">\n        <text layout_weight="1" text="控件1" bg="#ff0000"/>\n        <text layout_weight="2" text="控件2" bg="#00ff00"/>\n        <text layout_weight="1" text="控件3" bg="#0000ff"/>\n    </vertical>\n);\n'})}),"\n",(0,i.jsx)(t.p,{children:"在这个布局中，因为指定了weightSum为5, 因此第一个控件高度为1/5, 第二个控件为2/5, 第三个控件为1/5.\n再例如："}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'"ui";\nui.layout(\n    <vertical h="100dp">\n        <text h="40dp" text="控件1" bg="#ff0000"/>\n        <text layout_weight="2" text="控件2" bg="#00ff00"/>\n        <text layout_weight="1" text="控件3" bg="#0000ff"/>\n    </vertical>\n);\n'})}),"\n",(0,i.jsx)(t.p,{children:"在这个布局中，第一个控件并没有指定layout_weight, 而是指定高度为40dp, 因此不加入比例计算，此时布局剩余高度为60dp。第二个控件高度为剩余高度的2/3，也就是40dp，第三个控件高度为剩余高度的1/3，也就是20dp。"}),"\n",(0,i.jsx)(t.p,{children:"垂直布局的layout_weight属性还可以用于控制他的子控件高度占满剩余空间，例如："}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'"ui";\nui.layout(\n    <vertical h="100dp">\n        <text h="40dp" text="控件1" bg="#ff0000"/>\n        <text h="40dp" text="控件2" bg="#00ff00"/>\n        <text layout_weight="1" text="控件3" bg="#0000ff"/>\n    </vertical>\n);\n'})}),"\n",(0,i.jsx)(t.p,{children:"在这个布局中，第三个控件的高度会占满除去控件1和控件2的剩余空间。"})]})}function r(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:t}=Object.assign({},(0,h.ah)(),e.components);return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}let a=r;r.__RSPRESS_PAGE_META={},r.__RSPRESS_PAGE_META["v1%2F%E5%9F%BA%E7%A1%80%2Fui%2Fvertical.md"]={toc:[{text:"layout_weight",id:"layout_weight",depth:2}],title:"垂直布局: vertical",headingTitle:"垂直布局: vertical",frontmatter:{}}}}]);