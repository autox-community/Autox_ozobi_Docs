"use strict";(self.webpackChunkrepress_demo=self.webpackChunkrepress_demo||[]).push([["207"],{9274:function(e,n,c){c.r(n),c.d(n,{default:()=>h});var r=c(2676),s=c(453);function d(e){let n=Object.assign({h1:"h1",a:"a",p:"p",pre:"pre",code:"code",strong:"strong",ul:"ul",li:"li"},(0,s.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"开关控件-switch",children:["开关控件: switch",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#开关控件-switch",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"在 Auto.js 中，开关控件（Switch） 是一种常用的用户界面元素，用于表示两种互斥的状态，通常为“开”和“关”。用户可以通过滑动或点击来切换开关的状态。"}),"\n",(0,r.jsx)(n.p,{children:"以下是关于如何在 Auto.js 中使用开关控件的详细教程。"}),"\n",(0,r.jsx)(n.p,{children:"1.创建开关控件"}),"\n",(0,r.jsx)(n.p,{children:"要创建一个开关控件，可以使用 ui.Switch 函数，并传入相应的参数来设置其属性。"}),"\n",(0,r.jsx)(n.p,{children:"以下是一个创建开关控件的示例代码："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'"ui";\r\n\r\nui.layout(\r\n    <vertical padding="16">\r\n        <Switch id="sw" text="启用功能" checked="{{false}}" />\r\n    </vertical>\r\n);\n'})}),"\n",(0,r.jsx)(n.p,{children:"在上述代码中："}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:'id="sw"'}),":为开关控件设置了一个唯一的标识符，以便后续可以通过该 ID 来引用和操作该控件。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:' text="启用功能"'}),":设置了开关控件旁边显示的文本标签，用于向用户说明该开关的功能。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:' checked="{{false}}"'}),":初始化开关控件的状态为“关”（false）。如果希望初始状态为“开”，可以将值设置为 true。"]}),"\n",(0,r.jsx)(n.p,{children:"2.获取和设置开关状态"}),"\n",(0,r.jsx)(n.p,{children:"获取开关状态"}),"\n",(0,r.jsx)(n.p,{children:"要获取开关控件的当前状态，可以使用 ui.sw.checked 属性。"}),"\n",(0,r.jsx)(n.p,{children:"以下是一个获取开关状态的示例代码："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'ui.sw.on("check", function (checked) {\r\n    toast("当前开关状态：" + (checked ? "开" : "关"));\r\n});\n'})}),"\n",(0,r.jsx)(n.p,{children:"在上述代码中："}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:'ui.sw.on("check", function(checked) {...})'}),":为开关控件注册了一个",(0,r.jsx)(n.code,{children:"check"}),"事件监听器，当开关的状态发生变化时，会触发该事件，并传递当前的状态（",(0,r.jsx)(n.code,{children:"checked"}),"）作为参数。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:' toast("当前开关状态：" + (checked ? "开" : "关"))'}),":使用",(0,r.jsx)(n.code,{children:"toast"}),"函数显示当前的开关状态。如果",(0,r.jsx)(n.code,{children:"checked"}),"为",(0,r.jsx)(n.code,{children:"true"}),"，则显示“开”；否则显示“关”。"]}),"\n",(0,r.jsx)(n.p,{children:"设置开关状态"}),"\n",(0,r.jsxs)(n.p,{children:["要设置开关控件的状态，可以直接修改",(0,r.jsx)(n.code,{children:"ui.sw.checked"}),"属性的值。"]}),"\n",(0,r.jsx)(n.p,{children:"以下是一个设置开关状态的示例代码："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"ui.sw.checked = true; // 设置开关为“开”状态\n"})}),"\n",(0,r.jsxs)(n.p,{children:["或者，你也可以在创建开关控件时，通过",(0,r.jsx)(n.code,{children:"checked"}),"属性来设置初始状态，如之前所示。"]}),"\n",(0,r.jsx)(n.p,{children:"3.监听开关事件"}),"\n",(0,r.jsxs)(n.p,{children:["除了",(0,r.jsx)(n.code,{children:"check"}),"事件外，还可以为开关控件注册其他事件监听器，例如",(0,r.jsx)(n.code,{children:"click"}),"事件。"]}),"\n",(0,r.jsx)(n.p,{children:"以下是一个监听开关点击事件的示例代码："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'ui.sw.on("click", function () {\r\n    toast("开关被点击");\r\n});\n'})}),"\n",(0,r.jsx)(n.p,{children:"在上述代码中："}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:'ui.sw.on("click", function() {...})'}),":为开关控件注册了一个",(0,r.jsx)(n.code,{children:"click"}),"事件监听器，当用户点击开关时，会触发该事件。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:' toast("开关被点击")'}),":使用",(0,r.jsx)(n.code,{children:"toast"}),"函数显示一条提示信息，表示开关被点击。"]}),"\n",(0,r.jsx)(n.p,{children:"4.完整示例"}),"\n",(0,r.jsx)(n.p,{children:"以下是一个完整的示例代码，演示了如何创建开关控件、获取和设置其状态，以及监听相关事件："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'"ui";\r\n\r\nui.layout(\r\n    <vertical padding="16">\r\n        <Switch id="sw" text="启用功能" checked="{{false}}" />\r\n        <button id="btnGetState" text="获取开关状态" />\r\n        <button id="btnSetState" text="设置为开启" />\r\n    </vertical>\r\n);\r\n\r\n// 监听开关的check事件\r\nui.sw.on("check", function (checked) {\r\n    toast("当前开关状态：" + (checked ? "开" : "关"));\r\n});\r\n\r\n// 监听获取状态按钮的点击事件\r\nui.btnGetState.on("click", function () {\r\n    toast("当前开关状态：" + (ui.sw.checked ? "开" : "关"));\r\n});\r\n\r\n// 监听设置状态按钮的点击事件\r\nui.btnSetState.on("click", function () {\r\n    ui.sw.checked = true; // 设置开关为“开”状态\r\n});\n'})}),"\n",(0,r.jsx)(n.p,{children:"在上述代码中："}),"\n",(0,r.jsxs)(n.p,{children:["创建了一个开关控件（",(0,r.jsx)(n.code,{children:'id="sw"'}),"），并设置了初始状态为“关”。\r\n添加了两个按钮控件，分别用于获取开关的当前状态和设置开关为“开”状态。\r\n为开关控件注册了",(0,r.jsx)(n.code,{children:"check"}),"事件监听器，用于实时显示当前的开关状态。\r\n为获取状态按钮注册了",(0,r.jsx)(n.code,{children:"click"}),"事件监听器，用于显示当前的开关状态。\r\n为设置状态按钮注册了",(0,r.jsx)(n.code,{children:"click"}),"事件监听器，用于将开关设置为“开”状态。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"官方教程："})}),"\n",(0,r.jsx)(n.p,{children:"开关控件用于表示一个选项是否被启用。"}),"\n",(0,r.jsxs)(n.p,{children:["参见 Android ",(0,r.jsx)(n.a,{href:"https://developer.android.google.cn/reference/android/widget/Switch",target:"_blank",rel:"noopener noreferrer",children:"Switch"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"text"}),":"]}),"\n",(0,r.jsxs)(n.p,{children:["Switch 控件的文本，显示在框后面。实际上 Switch 控件也继承于",(0,r.jsx)(n.a,{href:"http://localhost/docs/zh/v8/ui/advanced.html#%E6%96%87%E6%9C%AC%E6%8E%A7%E4%BB%B6-text",target:"_blank",rel:"noopener noreferrer",children:"text"}),"和",(0,r.jsx)(n.a,{href:"http://localhost/docs/zh/v8/ui/advanced.html#%E6%8C%89%E9%92%AE%E6%8E%A7%E4%BB%B6-button",target:"_blank",rel:"noopener noreferrer",children:"button"}),"控件，它们的属性也可以用在 Switch 上，比如",(0,r.jsx)(n.code,{children:"textSize"}),", ",(0,r.jsx)(n.code,{children:"textStyle"}),"。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"checked"}),":"]}),"\n",(0,r.jsxs)(n.p,{children:["设置 Switch 开关的开启状态，当",(0,r.jsx)(n.code,{children:'checked="true"'}),"时为开启。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"enabled"}),":"]}),"\n",(0,r.jsxs)(n.p,{children:["设置 Switch 开关是否是启用的，若",(0,r.jsx)(n.code,{children:'enabled="false"'}),"则为禁用状态，显示未灰色，无法交互。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"isChecked()"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"返回 {boolean}"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["返回 Switch 控件是否是开启状态。比如",(0,r.jsx)(n.code,{children:"$ui.switch1.isChecked()"}),"。"]}),"\n",(0,r.jsxs)(n.p,{children:["事件: ",(0,r.jsx)(n.code,{children:"check"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"checked"})," {boolean} 是否被勾选"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"view"})," {View} 当前事件的 View"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"当用户勾选/取消勾选选项框时会触发该事件。"}),"\n",(0,r.jsx)(n.p,{children:"例子："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'"ui";\r\n\r\nui.layout(\r\n    <vertical padding="16">\r\n        <Switch id="sw" text="单选框1" />\r\n    </vertical>\r\n);\r\n\r\n// 监听的选中\r\n$ui.sw.on("check", (checked) => {\r\n    if (checked) {\r\n        toastLog("switch被打开了");\r\n    } else {\r\n        toastLog("switch被关闭了");\r\n    }\r\n});\n'})})]})}function i(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}let h=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["v1%2F%E5%9F%BA%E7%A1%80%2Fui%2Fswitch.md"]={toc:[],title:"开关控件: switch",headingTitle:"开关控件: switch",frontmatter:{}}}}]);