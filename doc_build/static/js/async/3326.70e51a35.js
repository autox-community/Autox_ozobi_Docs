"use strict";(self.webpackChunkrepress_demo=self.webpackChunkrepress_demo||[]).push([["3326"],{983:function(e,l,n){n.r(l),n.d(l,{default:()=>d});var s=n(2676),h=n(453);function r(e){let l=Object.assign({p:"p",ul:"ul",li:"li",code:"code",h1:"h1",a:"a",div:"div",h2:"h2",pre:"pre"},(0,h.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(l.p,{children:"shell 即 Unix Shell，在类 Unix 系统提供与操作系统交互的一系列命令。"}),"\n",(0,s.jsx)(l.p,{children:"很多程序可以用来执行 shell 命令，例如终端模拟器。"}),"\n",(0,s.jsx)(l.p,{children:'在 Auto.js 大致等同于用 adb 执行命令 "adb shell"。'}),"\n",(0,s.jsx)(l.p,{children:"其实现包括两种方式："}),"\n",(0,s.jsxs)(l.ul,{children:["\n",(0,s.jsxs)(l.li,{children:["通过",(0,s.jsx)(l.code,{children:"java.lang.Runtime.exec"}),"执行(shell, Tap, Home 等函数)"]}),"\n",(0,s.jsx)(l.li,{children:"通过内嵌终端模拟器执行(RootAutomator, Shell 等对象)"}),"\n"]}),"\n",(0,s.jsxs)(l.h1,{id:"shell-函数",children:["shell 函数",(0,s.jsx)(l.a,{className:"header-anchor","aria-hidden":"true",href:"#shell-函数",children:"#"})]}),"\n",(0,s.jsxs)(l.div,{className:"rspress-directive tip",children:[(0,s.jsx)(l.div,{className:"rspress-directive-title",children:"稳定性: 稳定"}),(0,s.jsx)(l.div,{className:"rspress-directive-content",children:"\n"})]}),"\n",(0,s.jsxs)(l.h2,{id:"shellcmd-root",children:["shell(cmd[, root])",(0,s.jsx)(l.a,{className:"header-anchor","aria-hidden":"true",href:"#shellcmd-root",children:"#"})]}),"\n",(0,s.jsxs)(l.ul,{children:["\n",(0,s.jsx)(l.li,{children:"cmd {string} 要执行的命令"}),"\n",(0,s.jsx)(l.li,{children:"root {Boolean} 是否以 root 权限运行，默认为 false。"}),"\n"]}),"\n",(0,s.jsx)(l.p,{children:"一次性执行命令 cmd, 并返回命令的执行结果。返回对象的其属性如下:"}),"\n",(0,s.jsxs)(l.ul,{children:["\n",(0,s.jsx)(l.li,{children:"code {number} 返回码。执行成功时为 0，失败时为非 0 的数字。"}),"\n",(0,s.jsx)(l.li,{children:"result {string} 运行结果(stdout 输出结果)"}),"\n",(0,s.jsx)(l.li,{children:'error {string} 运行的错误信息(stderr 输出结果)。例如执行需要 root 权限的命令但没有授予 root 权限会返回错误信息"Permission denied"。'}),"\n"]}),"\n",(0,s.jsx)(l.p,{children:"示例（强制停止微信）："}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-js",children:'var result = shell("am force-stop com.tencent.mm", true);\nlog(result);\n\nconsole.show();\n\nif (result.code == 0) {\n    toast("执行成功");\n} else {\n    toast("执行失败！请到控制台查看错误信息");\n}\n'})}),"\n",(0,s.jsxs)(l.h1,{id:"shell",children:["Shell",(0,s.jsx)(l.a,{className:"header-anchor","aria-hidden":"true",href:"#shell",children:"#"})]}),"\n",(0,s.jsx)(l.p,{children:"shell 函数通过用来一次性执行单条命令并获取结果。如果有多条命令需要执行，用 Shell 对象的效率更高。这是因为，每次运行 shell 函数都会打开一个单独的 shell 进程并在运行结束后关闭他，这个过程需要一定的时间；而 Shell 对象自始至终使用同一个 shell 进程。"}),"\n",(0,s.jsxs)(l.h2,{id:"new-shellroot",children:["new Shell(root)",(0,s.jsx)(l.a,{className:"header-anchor","aria-hidden":"true",href:"#new-shellroot",children:"#"})]}),"\n",(0,s.jsxs)(l.ul,{children:["\n",(0,s.jsx)(l.li,{children:"root {Boolean} 是否以 root 权限运行一个 shell 进程，默认为 false。这将会影响其后使用该 Shell 对象执行的命令的权限"}),"\n"]}),"\n",(0,s.jsx)(l.p,{children:'Shell 对象的"构造函数"。'}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-js",children:'var sh = new Shell(true);\n//强制停止微信\nsh.exec("am force-stop com.tencent.mm");\nsh.exit();\n'})}),"\n",(0,s.jsxs)(l.h2,{id:"shellexeccmd",children:["Shell.exec(cmd)",(0,s.jsx)(l.a,{className:"header-anchor","aria-hidden":"true",href:"#shellexeccmd",children:"#"})]}),"\n",(0,s.jsxs)(l.ul,{children:["\n",(0,s.jsxs)(l.li,{children:[(0,s.jsx)(l.code,{children:"cmd"})," {string} 要执行的命令"]}),"\n"]}),"\n",(0,s.jsx)(l.p,{children:"执行命令 cmd。该函数不会返回任何值。"}),"\n",(0,s.jsx)(l.p,{children:'注意，命令执行是"异步"的、非阻塞的。也就是不会等待命令完成后才继续向下执行。'}),"\n",(0,s.jsxs)(l.p,{children:["尽管这样的设计使用起来有很多不便之处，但受限于终端模拟器，暂时没有解决方式；如果后续能找到解决方案，则将提供",(0,s.jsx)(l.code,{children:"Shell.execAndWaitFor"}),"函数。"]}),"\n",(0,s.jsxs)(l.h2,{id:"shellexit",children:["Shell.exit()",(0,s.jsx)(l.a,{className:"header-anchor","aria-hidden":"true",href:"#shellexit",children:"#"})]}),"\n",(0,s.jsx)(l.p,{children:"直接退出 shell。正在执行的命令会被强制退出。"}),"\n",(0,s.jsxs)(l.h2,{id:"shellexitandwaitfor",children:["Shell.exitAndWaitFor()",(0,s.jsx)(l.a,{className:"header-anchor","aria-hidden":"true",href:"#shellexitandwaitfor",children:"#"})]}),"\n",(0,s.jsx)(l.p,{children:'执行"exit"命令并等待执行命令执行完成、退出 shell。'}),"\n",(0,s.jsx)(l.p,{children:"此函数会执行 exit 命令来正常退出 shell。"}),"\n",(0,s.jsxs)(l.h2,{id:"shellsetcallbackcallback",children:["Shell.setCallback(callback)",(0,s.jsx)(l.a,{className:"header-anchor","aria-hidden":"true",href:"#shellsetcallbackcallback",children:"#"})]}),"\n",(0,s.jsxs)(l.ul,{children:["\n",(0,s.jsx)(l.li,{children:"callback {Object} 回调函数"}),"\n"]}),"\n",(0,s.jsx)(l.p,{children:"设置该 Shell 的回调函数，以便监听 Shell 的输出。可以包括以下属性："}),"\n",(0,s.jsxs)(l.ul,{children:["\n",(0,s.jsx)(l.li,{children:"onOutput {Function} 每当 shell 有新的输出时便会调用该函数。其参数是一个字符串。"}),"\n",(0,s.jsx)(l.li,{children:"onNewLine {Function} 每当 shell 有新的一行输出时便会调用该函数。其参数是一个字符串(不包括最后的换行符)。"}),"\n"]}),"\n",(0,s.jsx)(l.p,{children:"例如:"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-js",children:'var sh = new Shell();\nsh.setCallback({\n    onNewLine: function (line) {\n        //有新的一行输出时打印到控制台\n        log(line);\n    },\n});\nwhile (true) {\n    //循环输入命令\n    var cmd = dialogs.rawInput("请输入要执行的命令，输入exit退出");\n    if (cmd == "exit") {\n        break;\n    }\n    //执行命令\n    sh.exec(cmd);\n}\nsh.exit();\n'})}),"\n",(0,s.jsxs)(l.h1,{id:"附录-shell-命令简介",children:["附录: shell 命令简介",(0,s.jsx)(l.a,{className:"header-anchor","aria-hidden":"true",href:"#附录-shell-命令简介",children:"#"})]}),"\n",(0,s.jsxs)(l.p,{children:["以下关于 shell 命令的资料来自",(0,s.jsx)(l.a,{href:"https://developer.android.com/studio/command-line/adb.html#shellcommands",target:"_blank",rel:"noopener noreferrer",children:"AndroidStudio 用户指南：Shell 命令"}),"。"]})]})}function i(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:l}=Object.assign({},(0,h.ah)(),e.components);return l?(0,s.jsx)(l,{...e,children:(0,s.jsx)(r,{...e})}):r(e)}let d=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["v1%2F%E9%AB%98%E7%BA%A7%2Fshell%2Fshell.md"]={toc:[{text:"shell(cmd[, root])",id:"shellcmd-root",depth:2},{text:"new Shell(root)",id:"new-shellroot",depth:2},{text:"Shell.exec(cmd)",id:"shellexeccmd",depth:2},{text:"Shell.exit()",id:"shellexit",depth:2},{text:"Shell.exitAndWaitFor()",id:"shellexitandwaitfor",depth:2},{text:"Shell.setCallback(callback)",id:"shellsetcallbackcallback",depth:2}],title:"附录: shell 命令简介",headingTitle:"附录: shell 命令简介",frontmatter:{}}}}]);