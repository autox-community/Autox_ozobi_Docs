"use strict";(self.webpackChunkrepress_demo=self.webpackChunkrepress_demo||[]).push([["4591"],{1809:function(e,n,l){l.r(n),l.d(n,{default:()=>d});var i=l(2676),s=l(453);function c(e){let n=Object.assign({h1:"h1",a:"a",div:"div",p:"p",pre:"pre",code:"code",h2:"h2",ul:"ul",li:"li"},(0,s.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h1,{id:"dialogs",children:["Dialogs",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#dialogs",children:"#"})]}),"\n",(0,i.jsxs)(n.div,{className:"rspress-directive tip",children:[(0,i.jsx)(n.div,{className:"rspress-directive-title",children:"稳定性: 稳定"}),(0,i.jsx)(n.div,{className:"rspress-directive-content",children:"\n"})]}),"\n",(0,i.jsx)(n.p,{children:"dialogs 模块提供了简单的对话框支持，可以通过对话框和用户进行交互。最简单的例子如下："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'alert("您好");\n'})}),"\n",(0,i.jsx)(n.p,{children:'这段代码会弹出一个消息提示框显示"您好"，并在用户点击"确定"后继续运行。稍微复杂一点的例子如下：'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'var clear = confirm("要清除所有缓存吗?");\nif (clear) {\n    alert("清除成功!");\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"confirm()"}),'会弹出一个对话框并让用户选择"是"或"否"，如果选择"是"则返回 true。']}),"\n",(0,i.jsxs)(n.p,{children:["需要特别注意的是，对话框在 ui 模式下不能像通常那样使用，应该使用回调函数或者",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise",target:"_blank",rel:"noopener noreferrer",children:"Promise"}),"的形式。理解这一点可能稍有困难。举个例子:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'"ui";\n//回调形式\nconfirm("要清除所有缓存吗?", function (clear) {\n    if (clear) {\n        alert("清除成功!");\n    }\n});\n//Promise形式\nconfirm("要清除所有缓存吗?").then((clear) => {\n    if (clear) {\n        alert("清除成功!");\n    }\n});\n'})}),"\n",(0,i.jsxs)(n.h2,{id:"dialogsalerttitle-content-callback",children:["dialogs.alert(title[, content, callback])",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#dialogsalerttitle-content-callback",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"title"})," {string} 对话框的标题。"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"content"})," {string} 可选，对话框的内容。默认为空。"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"callback"})," {Function} 回调函数，可选。当用户点击确定时被调用,一般用于 ui 模式。"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"显示一个只包含“确定”按钮的提示对话框。直至用户点击确定脚本才继续运行。"}),"\n",(0,i.jsx)(n.p,{children:"该函数也可以作为全局函数使用。"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'alert("出现错误~", "出现未知错误，请联系脚本作者”);\n'})}),"\n",(0,i.jsxs)(n.p,{children:["在 ui 模式下该函数返回一个",(0,i.jsx)(n.code,{children:"Promise"}),"。例如:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'"ui";\nalert("嘿嘿嘿").then(() => {\n    //当点击确定后会执行这里\n});\n'})}),"\n",(0,i.jsxs)(n.h2,{id:"dialogsconfirmtitle-content-callback",children:["dialogs.confirm(title[, content, callback])",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#dialogsconfirmtitle-content-callback",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"title"})," {string} 对话框的标题。"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"content"})," {string} 可选，对话框的内容。默认为空。"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"callback"})," {Function} 回调函数，可选。当用户点击确定时被调用,一般用于 ui 模式。"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["显示一个包含“确定”和“取消”按钮的提示对话框。如果用户点击“确定”则返回 ",(0,i.jsx)(n.code,{children:"true"})," ，否则返回 ",(0,i.jsx)(n.code,{children:"false"})," 。"]}),"\n",(0,i.jsx)(n.p,{children:"该函数也可以作为全局函数使用。"}),"\n",(0,i.jsxs)(n.p,{children:["在 ui 模式下该函数返回一个",(0,i.jsx)(n.code,{children:"Promise"}),"。例如:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'"ui";\nconfirm("确定吗").then((value) => {\n    //当点击确定后会执行这里, value为true或false, 表示点击"确定"或"取消"\n});\n'})}),"\n",(0,i.jsxs)(n.h2,{id:"dialogsrawinputtitle-prefill-callback",children:["dialogs.rawInput(title[, prefill, callback])",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#dialogsrawinputtitle-prefill-callback",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"title"})," {string} 对话框的标题。"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"prefill"})," {string} 输入框的初始内容，可选，默认为空。"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"callback"})," {Function} 回调函数，可选。当用户点击确定时被调用,一般用于 ui 模式。"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"显示一个包含输入框的对话框，等待用户输入内容，并在用户点击确定时将输入的字符串返回。如果用户取消了输入，返回 null。"}),"\n",(0,i.jsx)(n.p,{children:"该函数也可以作为全局函数使用。"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'var name = rawInput("请输入您的名字", "小明");\nalert("您的名字是" + name);\n'})}),"\n",(0,i.jsxs)(n.p,{children:["在 ui 模式下该函数返回一个",(0,i.jsx)(n.code,{children:"Promise"}),"。例如:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'"ui";\nrawInput("请输入您的名字", "小明").then((name) => {\n    alert("您的名字是" + name);\n});\n'})}),"\n",(0,i.jsx)(n.p,{children:"当然也可以使用回调函数，例如:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'rawInput("请输入您的名字", "小明", (name) => {\n    alert("您的名字是" + name);\n});\n'})}),"\n",(0,i.jsxs)(n.h2,{id:"dialogsinputtitle-prefill-callback",children:["dialogs.input(title[, prefill, callback])",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#dialogsinputtitle-prefill-callback",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["等效于 ",(0,i.jsx)(n.code,{children:"eval(dialogs.rawInput(title, prefill, callback))"}),", 该函数和 rawInput 的区别在于，会把输入的字符串用 eval 计算一遍再返回，返回的可能不是字符串。"]}),"\n",(0,i.jsx)(n.p,{children:"可以用该函数输入数字、数组等。例如："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'var age = dialogs.input("请输入您的年龄", "18");\n// new Date().getYear() + 1900 可获取当前年份\nvar year = new Date().getYear() + 1900 - age;\nalert("您的出生年份是" + year);\n'})}),"\n",(0,i.jsxs)(n.p,{children:["在 ui 模式下该函数返回一个",(0,i.jsx)(n.code,{children:"Promise"}),"。例如:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'"ui";\ndialogs.input("请输入您的年龄", "18").then((age) => {\n    var year = new Date().getYear() + 1900 - age;\n    alert("您的出生年份是" + year);\n});\n'})}),"\n",(0,i.jsxs)(n.h2,{id:"dialogsprompttitle-prefill-callback",children:["dialogs.prompt(title[, prefill, callback])",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#dialogsprompttitle-prefill-callback",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["相当于 ",(0,i.jsx)(n.code,{children:"dialogs.rawInput()"}),";"]}),"\n",(0,i.jsxs)(n.h2,{id:"dialogsselecttitle-items-callback",children:["dialogs.select(title, items, callback)",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#dialogsselecttitle-items-callback",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"title"})," {string} 对话框的标题。"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"items"})," {Array} 对话框的选项列表，是一个字符串数组。"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"callback"})," {Function} 回调函数，可选。当用户点击确定时被调用,一般用于 ui 模式。"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"显示一个带有选项列表的对话框，等待用户选择，返回用户选择的选项索引(0 ~ item.length - 1)。如果用户取消了选择，返回-1。"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'var options = ["选项A", "选项B", "选项C", "选项D"];\nvar i = dialogs.select("请选择一个选项", options);\nif (i >= 0) {\n    toast("您选择的是" + options[i]);\n} else {\n    toast("您取消了选择");\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["在 ui 模式下该函数返回一个",(0,i.jsx)(n.code,{children:"Promise"}),"。例如:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'"ui";\ndialogs.select("请选择一个选项", ["选项A", "选项B", "选项C", "选项D"]).then((i) => {\n    toast(i);\n});\n'})}),"\n",(0,i.jsxs)(n.h2,{id:"dialogssinglechoicetitle-items-index-callback",children:["dialogs.singleChoice(title, items[, index, callback])",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#dialogssinglechoicetitle-items-index-callback",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"title"})," {string} 对话框的标题。"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"items"})," {Array} 对话框的选项列表，是一个字符串数组。"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"index"})," {number} 对话框的初始选项的位置，默认为 0。"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"callback"})," {Function} 回调函数，可选。当用户点击确定时被调用,一般用于 ui 模式。"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"显示一个单选列表对话框，等待用户选择，返回用户选择的选项索引(0 ~ item.length - 1)。如果用户取消了选择，返回-1。"}),"\n",(0,i.jsxs)(n.p,{children:["在 ui 模式下该函数返回一个",(0,i.jsx)(n.code,{children:"Promise"}),"。"]}),"\n",(0,i.jsxs)(n.h2,{id:"dialogsmultichoicetitle-items-indices-callback",children:["dialogs.multiChoice(title, items[, indices, callback])",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#dialogsmultichoicetitle-items-indices-callback",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"title"})," {string} 对话框的标题。"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"items"})," {Array} 对话框的选项列表，是一个字符串数组。"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"indices"})," {Array} 选项列表中初始选中的项目索引的数组，默认为空数组。"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"callback"})," {Function} 回调函数，可选。当用户点击确定时被调用,一般用于 ui 模式。"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["显示一个多选列表对话框，等待用户选择，返回用户选择的选项索引的数组。如果用户取消了选择，返回",(0,i.jsx)(n.code,{children:"[]"}),"。"]}),"\n",(0,i.jsxs)(n.p,{children:["在 ui 模式下该函数返回一个",(0,i.jsx)(n.code,{children:"Promise"}),"。"]}),"\n",(0,i.jsxs)(n.h2,{id:"dialogsbuildproperties",children:["dialogs.build(properties)",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#dialogsbuildproperties",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"properties"})," {Object} 对话框属性，用于配置对话框。"]}),"\n",(0,i.jsx)(n.li,{children:"返回 {Dialog}"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"创建一个可自定义的对话框，例如："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'dialogs\n    .build({\n        //对话框标题\n        title: "发现新版本",\n        //对话框内容\n        content: "更新日志: 新增了若干了BUG",\n        //确定键内容\n        positive: "下载",\n        //取消键内容\n        negative: "取消",\n        //中性键内容\n        neutral: "到浏览器下载",\n        //勾选框内容\n        checkBoxPrompt: "不再提示",\n    })\n    .on("positive", () => {\n        //监听确定键\n        toast("开始下载....");\n    })\n    .on("neutral", () => {\n        //监听中性键\n        app.openUrl("https://www.autojs.org");\n    })\n    .on("check", (checked) => {\n        //监听勾选框\n        log(checked);\n    })\n    .show();\n'})}),"\n",(0,i.jsx)(n.p,{children:"选项 properties 可供配置的项目为:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"title"})," {string} 对话框标题"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"titleColor"})," {string} | {number} 对话框标题的颜色"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"buttonRippleColor"})," {string} | {number} 对话框按钮的波纹效果颜色"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"icon"})," {string} | {Image} 对话框的图标，是一个 URL 或者图片对象"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"content"})," {string} 对话框文字内容"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"contentColor"}),"{string} | {number} 对话框文字内容的颜色"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"contentLineSpacing"}),"{number} 对话框文字内容的行高倍数，1.0 为一倍行高"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"items"})," {Array} 对话框列表的选项"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"itemsColor"})," {string} | {number} 对话框列表的选项的文字颜色"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"itemsSelectMode"})," {string} 对话框列表的选项选择模式，可以为:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"select"})," 普通选择模式"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"single"})," 单选模式"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"multi"})," 多选模式"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"itemsSelectedIndex"})," {number} | {Array} 对话框列表中预先选中的项目索引，如果是单选模式为一个索引；多选模式则为数组"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"positive"})," {string} 对话框确定按钮的文字内容(最右边按钮)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"positiveColor"})," {string} | {number} 对话框确定按钮的文字颜色(最右边按钮)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"neutral"})," {string} 对话框中立按钮的文字内容(最左边按钮)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"neutralColor"})," {string} | {number} 对话框中立按钮的文字颜色(最左边按钮)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"negative"})," {string} 对话框取消按钮的文字内容(确定按钮左边的按钮)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"negativeColor"})," {string} | {number} 对话框取消按钮的文字颜色(确定按钮左边的按钮)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"checkBoxPrompt"})," {string} 勾选框文字内容"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"checkBoxChecked"})," {boolean} 勾选框是否勾选"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"progress"})," {Object} 配置对话框进度条的对象：","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"max"})," {number} 进度条的最大值，如果为-1 则为无限循环的进度条"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"horizontal"})," {boolean} 如果为 true, 则对话框无限循环的进度条为水平进度条"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"showMinMax"})," {boolean} 是否显示进度条的最大值和最小值"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"cancelable"})," {boolean} 对话框是否可取消，如果为 false，则对话框只能用代码手动取消"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"canceledOnTouchOutside"})," {boolean} 对话框是否在点击对话框以外区域时自动取消，默认为 true"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"inputHint"})," {string} 对话框的输入框的输入提示"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"inputPrefill"})," {string} 对话框输入框的默认输入内容"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"通过这些选项可以自定义一个对话框，并通过监听返回的 Dialog 对象的按键、输入事件来实现交互。下面是一些例子。"}),"\n",(0,i.jsx)(n.p,{children:"模拟 alert 对话框："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'dialogs\n    .build({\n        title: "你好",\n        content: "今天也要元气满满哦",\n        positive: "好的",\n    })\n    .show();\n'})}),"\n",(0,i.jsx)(n.p,{children:"模拟 confirm 对话框:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'dialogs\n    .build({\n        title: "你好",\n        content: "请问你是笨蛋吗?",\n        positive: "是的",\n        negative: "我是大笨蛋",\n    })\n    .on("positive", () => {\n        alert("哈哈哈笨蛋");\n    })\n    .on("negative", () => {\n        alert("哈哈哈大笨蛋");\n    })\n    .show();\n'})}),"\n",(0,i.jsx)(n.p,{children:"模拟单选框:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'dialogs\n    .build({\n        title: "单选",\n        items: ["选项1", "选项2", "选项3", "选项4"],\n        itemsSelectMode: "single",\n        itemsSelectedIndex: 3,\n    })\n    .on("single_choice", (index, item) => {\n        toast("您选择的是" + item);\n    })\n    .show();\n'})}),"\n",(0,i.jsx)(n.p,{children:'"处理中"对话框:'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'var d = dialogs\n    .build({\n        title: "下载中...",\n        progress: {\n            max: -1,\n        },\n        cancelable: false,\n    })\n    .show();\n\nsetTimeout(() => {\n    d.dismiss();\n}, 3000);\n'})}),"\n",(0,i.jsx)(n.p,{children:"输入对话框:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'dialogs\n    .build({\n        title: "请输入您的年龄",\n        inputPrefill: "18",\n    })\n    .on("input", (input) => {\n        var age = parseInt(input);\n        toastLog(age);\n    })\n    .show();\n'})}),"\n",(0,i.jsx)(n.p,{children:"使用这个函数来构造对话框，一个明显的不同是需要使用回调函数而不能像 dialogs 其他函数一样同步地返回结果；但也可以通过 threads 模块的方法来实现。例如显示一个输入框并获取输入结果为："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'var input = threads.disposable();\ndialogas\n    .build({\n        title: "请输入您的年龄",\n        inputPrefill: "18",\n    })\n    .on("input", (text) => {\n        input.setAndNotify(text);\n    })\n    .show();\nvar age = parseInt(input.blockedGet());\ntosatLog(age);\n'})})]})}function r(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}let d=r;r.__RSPRESS_PAGE_META={},r.__RSPRESS_PAGE_META["v1%2F%E9%AB%98%E7%BA%A7%2Fdialogs%2Fdialogs.md"]={toc:[{text:"dialogs.alert(title[, content, callback])",id:"dialogsalerttitle-content-callback",depth:2},{text:"dialogs.confirm(title[, content, callback])",id:"dialogsconfirmtitle-content-callback",depth:2},{text:"dialogs.rawInput(title[, prefill, callback])",id:"dialogsrawinputtitle-prefill-callback",depth:2},{text:"dialogs.input(title[, prefill, callback])",id:"dialogsinputtitle-prefill-callback",depth:2},{text:"dialogs.prompt(title[, prefill, callback])",id:"dialogsprompttitle-prefill-callback",depth:2},{text:"dialogs.select(title, items, callback)",id:"dialogsselecttitle-items-callback",depth:2},{text:"dialogs.singleChoice(title, items[, index, callback])",id:"dialogssinglechoicetitle-items-index-callback",depth:2},{text:"dialogs.multiChoice(title, items[, indices, callback])",id:"dialogsmultichoicetitle-items-indices-callback",depth:2},{text:"dialogs.build(properties)",id:"dialogsbuildproperties",depth:2}],title:"Dialogs",headingTitle:"Dialogs",frontmatter:{}}}}]);