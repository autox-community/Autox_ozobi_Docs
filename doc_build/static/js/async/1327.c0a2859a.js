"use strict";(self.webpackChunkrepress_demo=self.webpackChunkrepress_demo||[]).push([["1327"],{6567:function(e,n,r){r.r(n),r.d(n,{default:()=>o});var i=r(2676),d=r(453);function s(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h2:"h2",strong:"strong",pre:"pre",ul:"ul",li:"li"},(0,d.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h1,{id:"协程",children:["协程",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#协程",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["见 App 中 ",(0,i.jsx)(n.code,{children:"示例代码 / 协程"})]}),"\n",(0,i.jsxs)(n.h2,{id:"promisecoroutine",children:["Promise.coroutine()",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#promisecoroutine",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"v6.3.7 新增"}),"\n在该版本引入 bluebird 后你可以使用 bluebird 带来的一项协程特性，这个方法接收一个",(0,i.jsx)(n.strong,{children:"Generator 函数"}),"作为参数，函数内部可以像",(0,i.jsx)(n.strong,{children:"async 函数"}),"一样编写，返回一个返回值为",(0,i.jsx)(n.code,{children:"Promise"}),"的函数，说起来可能有点难以理解，具体看下方例子"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'//async函数写法\nlet main = async function(s) {\n    var result = await Promise.resolve("value:"+s);\n    return result;\n}\n//Generator 函数写法\nlet main = Promise.coroutine(function*(s) {\n    var result = yield Promise.resolve("value:"+s);\n    return result;\n})\n\nmain(\'test\').then(log)\n'})}),"\n",(0,i.jsx)(n.p,{children:"可以看到只要将 await 关键换成 yield 就能够代替还不支持的 async 函数，下方是一个异步循环的例子"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"let main = Promise.coroutine(function*(size) {\n    for (var i = 0; i < size; i++) {\n        yield Promise.delay(1000);\n        log(i);\n    }\n    log('end')\n})\nmain(10);//在控制台每秒输出一个数字\n"})}),"\n",(0,i.jsxs)(n.p,{children:["与 async 函数不同的是 yield 关键字作为表达式使用时必须带上圆括号，否则会有语法错误，在默认情况下 yield 后面只能是 Promise 或带有 then 方法的对象，要处理其他类型数据需要使用",(0,i.jsx)(n.code,{children:"Promise.coroutine.addYieldHandler()"}),"添加处理器"]}),"\n",(0,i.jsxs)(n.h2,{id:"promisecoroutineaddyieldhandlerhandler",children:["Promise.coroutine.addYieldHandler(handler)",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#promisecoroutineaddyieldhandlerhandler",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"handler {function} 处理函数"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"函数的参数为 yield 的导出，反回值为 yield 的反回"})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,d.ah)(),e.components);return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(s,{...e})}):s(e)}let o=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["v1%2F%E9%AB%98%E7%BA%A7%2Fcontinuation.md"]={toc:[{text:"Promise.coroutine()",id:"promisecoroutine",depth:2},{text:"Promise.coroutine.addYieldHandler(handler)",id:"promisecoroutineaddyieldhandlerhandler",depth:2}],title:"协程",headingTitle:"协程",frontmatter:{}}}}]);