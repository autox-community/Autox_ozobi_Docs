"use strict";(self.webpackChunkrepress_demo=self.webpackChunkrepress_demo||[]).push([["5954"],{8613:function(e,r,a){a.r(r),a.d(r,{default:()=>s});var t=a(2676),d=a(453);function i(e){let r=Object.assign({h1:"h1",a:"a",p:"p",code:"code",pre:"pre",h2:"h2",ul:"ul",li:"li"},(0,d.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(r.h1,{id:"thread",children:["Thread",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#thread",children:"#"})]}),"\n",(0,t.jsxs)(r.p,{children:["线程对象，",(0,t.jsx)(r.code,{children:"threads.start()"}),"返回的对象，用于获取和控制线程的状态，与其他线程交互等。"]}),"\n",(0,t.jsxs)(r.p,{children:["Thread 对象提供了和 timers 模块一样的 API，例如",(0,t.jsx)(r.code,{children:"setTimeout()"}),", ",(0,t.jsx)(r.code,{children:"setInterval()"}),"等，用于在该线程执行相应的定时回调，从而使线程之间可以直接交互。例如："]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:'var thread = threads.start(function () {\r\n    //在子线程执行的定时器\r\n    setInterval(function () {\r\n        log("子线程:" + threads.currentThread());\r\n    }, 1000);\r\n});\r\n\r\nlog("当前线程为主线程:" + threads.currentThread());\r\n\r\n//等待子线程启动\r\nthread.waitFor();\r\n//在子线程执行的定时器\r\nthread.setTimeout(function () {\r\n    //这段代码会在子线程执行\r\n    log("当前线程为子线程:" + threads.currentThread());\r\n}, 2000);\r\n\r\nsleep(30 * 1000);\r\nthread.interrupt();\n'})}),"\n",(0,t.jsxs)(r.h2,{id:"threadinterrupt",children:["Thread.interrupt()",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#threadinterrupt",children:"#"})]}),"\n",(0,t.jsx)(r.p,{children:"中断线程运行。"}),"\n",(0,t.jsxs)(r.h2,{id:"threadjointimeout",children:["Thread.join([timeout])",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#threadjointimeout",children:"#"})]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"timeout"})," {number} 等待时间，单位毫秒"]}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:"等待线程执行完成。如果 timeout 为 0，则会一直等待直至该线程执行完成；否则最多等待 timeout 毫秒的时间。"}),"\n",(0,t.jsx)(r.p,{children:"例如:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:'var sum = 0;\r\n//启动子线程计算1加到10000\r\nvar thread = threads.start(function () {\r\n    for (var i = 0; i < 10000; i++) {\r\n        sum += i;\r\n    }\r\n});\r\n//等待该线程完成\r\nthread.join();\r\ntoast("sum = " + sum);\n'})}),"\n",(0,t.jsxs)(r.h2,{id:"threadisalive",children:["Thread.isAlive()",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#threadisalive",children:"#"})]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"返回 {boolean}"}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:["返回线程是否存活。如果线程仍未开始或已经结束，返回",(0,t.jsx)(r.code,{children:"false"}),"; 如果线程已经开始或者正在运行中，返回",(0,t.jsx)(r.code,{children:"true"}),"。"]}),"\n",(0,t.jsxs)(r.h2,{id:"threadwaitfor",children:["Thread.waitFor()",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#threadwaitfor",children:"#"})]}),"\n",(0,t.jsxs)(r.p,{children:["等待线程开始执行。调用",(0,t.jsx)(r.code,{children:"threads.start()"}),"以后线程仍然需要一定时间才能开始执行，因此调用此函数会等待线程开始执行；如果线程已经处于执行状态则立即返回。"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"var thread = threads.start(function () {\r\n    //do something\r\n});\r\nthread.waitFor();\r\nthread.setTimeout(function () {\r\n    //do something\r\n}, 1000);\n"})}),"\n",(0,t.jsxs)(r.h2,{id:"threadsettimeoutcallback-delay-args",children:["Thread.setTimeout(callback, delay[, ...args])",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#threadsettimeoutcallback-delay-args",children:"#"})]}),"\n",(0,t.jsxs)(r.p,{children:["参见",(0,t.jsx)(r.a,{href:"/timers#settimeoutcallback-delay-args",children:"timers.setTimeout"}),"。"]}),"\n",(0,t.jsxs)(r.p,{children:["区别在于, 该定时器会在该线程执行。如果当前线程仍未开始执行或已经执行结束，则抛出",(0,t.jsx)(r.code,{children:"IllegalStateException"}),"。"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:'log("当前线程(主线程):" + threads.currentThread());\r\n\r\nvar thread = threads.start(function () {\r\n    //设置一个空的定时来保持线程的运行状态\r\n    setInterval(function () {}, 1000);\r\n});\r\n\r\nsleep(1000);\r\nthread.setTimeout(function () {\r\n    log("当前线程(子线程):" + threads.currentThread());\r\n    exit();\r\n}, 1000);\n'})}),"\n",(0,t.jsxs)(r.h2,{id:"threadsetintervalcallback-delay-args",children:["Thread.setInterval(callback, delay[, ...args])",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#threadsetintervalcallback-delay-args",children:"#"})]}),"\n",(0,t.jsxs)(r.p,{children:["参见",(0,t.jsx)(r.a,{href:"/timers#setintervalcallback-delay-args",children:"timers.setInterval()"}),"。"]}),"\n",(0,t.jsxs)(r.p,{children:["区别在于, 该定时器会在该线程执行。如果当前线程仍未开始执行或已经执行结束，则抛出",(0,t.jsx)(r.code,{children:"IllegalStateException"}),"。"]}),"\n",(0,t.jsxs)(r.h2,{id:"threadsetimmediatecallback-args",children:["Thread.setImmediate(callback[, ...args])",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#threadsetimmediatecallback-args",children:"#"})]}),"\n",(0,t.jsxs)(r.p,{children:["参见",(0,t.jsx)(r.a,{href:"/timers#setimmediatecallback-args",children:"timers.setImmediate"}),"。"]}),"\n",(0,t.jsxs)(r.p,{children:["区别在于, 该定时器会在该线程执行。如果当前线程仍未开始执行或已经执行结束，则抛出",(0,t.jsx)(r.code,{children:"IllegalStateException"}),"。"]}),"\n",(0,t.jsxs)(r.h2,{id:"threadclearintervalid",children:["Thread.clearInterval(id)",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#threadclearintervalid",children:"#"})]}),"\n",(0,t.jsxs)(r.p,{children:["参见",(0,t.jsx)(r.a,{href:"/timers#clearintervalid",children:"timers.clearInterval()"}),"。"]}),"\n",(0,t.jsxs)(r.p,{children:["区别在于, 该定时器会在该线程执行。如果当前线程仍未开始执行或已经执行结束，则抛出",(0,t.jsx)(r.code,{children:"IllegalStateException"}),"。"]}),"\n",(0,t.jsxs)(r.h2,{id:"threadcleartimeoutid",children:["Thread.clearTimeout(id)",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#threadcleartimeoutid",children:"#"})]}),"\n",(0,t.jsxs)(r.p,{children:["参见",(0,t.jsx)(r.a,{href:"/timers#cleartimeoutid",children:"timers.clearTimeout()"}),"。"]}),"\n",(0,t.jsxs)(r.p,{children:["区别在于, 该定时器会在该线程执行。如果当前线程仍未开始执行或已经执行结束，则抛出",(0,t.jsx)(r.code,{children:"IllegalStateException"}),"。"]}),"\n",(0,t.jsxs)(r.h2,{id:"threadclearimmediateid",children:["Thread.clearImmediate(id)",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#threadclearimmediateid",children:"#"})]}),"\n",(0,t.jsxs)(r.p,{children:["参见",(0,t.jsx)(r.a,{href:"/timers#clearimmediateid",children:"timers.clearImmediate()"}),"。"]}),"\n",(0,t.jsxs)(r.p,{children:["区别在于, 该定时器会在该线程执行。如果当前线程仍未开始执行或已经执行结束，则抛出",(0,t.jsx)(r.code,{children:"IllegalStateException"}),"。"]})]})}function n(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:r}=Object.assign({},(0,d.ah)(),e.components);return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(i,{...e})}):i(e)}let s=n;n.__RSPRESS_PAGE_META={},n.__RSPRESS_PAGE_META["v1%2F%E9%AB%98%E7%BA%A7%2Fthreads%2Fthread.md"]={toc:[{text:"Thread.interrupt()",id:"threadinterrupt",depth:2},{text:"Thread.join([timeout])",id:"threadjointimeout",depth:2},{text:"Thread.isAlive()",id:"threadisalive",depth:2},{text:"Thread.waitFor()",id:"threadwaitfor",depth:2},{text:"Thread.setTimeout(callback, delay[, ...args])",id:"threadsettimeoutcallback-delay-args",depth:2},{text:"Thread.setInterval(callback, delay[, ...args])",id:"threadsetintervalcallback-delay-args",depth:2},{text:"Thread.setImmediate(callback[, ...args])",id:"threadsetimmediatecallback-args",depth:2},{text:"Thread.clearInterval(id)",id:"threadclearintervalid",depth:2},{text:"Thread.clearTimeout(id)",id:"threadcleartimeoutid",depth:2},{text:"Thread.clearImmediate(id)",id:"threadclearimmediateid",depth:2}],title:"Thread",headingTitle:"Thread",frontmatter:{}}}}]);