"use strict";(self.webpackChunkrepress_demo=self.webpackChunkrepress_demo||[]).push([["7556"],{2731:function(e,c,n){n.r(c),n.d(c,{default:()=>h});var r=n(2676),d=n(453);function s(e){let c=Object.assign({h1:"h1",a:"a",p:"p",pre:"pre",code:"code",strong:"strong",ul:"ul",li:"li"},(0,d.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(c.h1,{id:"勾选框控件-checkbox",children:["勾选框控件: checkbox",(0,r.jsx)(c.a,{className:"header-anchor","aria-hidden":"true",href:"#勾选框控件-checkbox",children:"#"})]}),"\n",(0,r.jsx)(c.p,{children:"勾选框是一种用于表示选择状态的控件，用户可以通过点击来切换其选中状态。"}),"\n",(0,r.jsx)(c.p,{children:"1.创建勾选框控件"}),"\n",(0,r.jsx)(c.p,{children:"要创建一个勾选框控件，可以使用 ui.CheckBox 函数，并传入相应的参数来设置其属性。以下是一个创建勾选框控件的示例代码："}),"\n",(0,r.jsx)(c.pre,{children:(0,r.jsx)(c.code,{className:"language-js",children:'"ui";\r\n\r\nui.layout(\r\n    <vertical padding="16">\r\n        <checkbox id="cb" text="同意条款" checked="{{false}}" />\r\n    </vertical>\r\n);\n'})}),"\n",(0,r.jsx)(c.p,{children:"在上述代码中："}),"\n",(0,r.jsxs)(c.p,{children:[(0,r.jsx)(c.code,{children:' id="cb"'}),":为勾选框控件设置了一个唯一的标识符，以便后续可以通过该 ID 来引用和操作该控件。"]}),"\n",(0,r.jsxs)(c.p,{children:[(0,r.jsx)(c.code,{children:' text="同意条款"'}),":设置了勾选框控件的文本标签，用于向用户显示相关信息。"]}),"\n",(0,r.jsxs)(c.p,{children:[(0,r.jsx)(c.code,{children:'checked="{{false}}"'}),":初始化勾选框控件的选中状态为未选中（false）。如果希望初始状态为选中，可以将值设置为 true"]}),"\n",(0,r.jsx)(c.p,{children:"2.获取和设置勾选框状态"}),"\n",(0,r.jsx)(c.p,{children:"获取勾选框状态"}),"\n",(0,r.jsx)(c.p,{children:"要获取勾选框控件的当前选中状态，可以使用 ui.cb.checked 属性。以下是一个获取勾选框状态的示例代码："}),"\n",(0,r.jsx)(c.pre,{children:(0,r.jsx)(c.code,{className:"language-js",children:'ui.cb.on("check", function (checked) {\r\n    toast("当前选中状态：" + checked);\r\n});\n'})}),"\n",(0,r.jsx)(c.p,{children:"在上述代码中："}),"\n",(0,r.jsxs)(c.p,{children:[(0,r.jsx)(c.code,{children:' ui.cb.on("check", function(checked) {...})'}),":为勾选框控件注册了一个 check 事件监听器，当勾选框的状态发生变化时，会触发该事件，并传递当前的选中状态（checked）作为参数。"]}),"\n",(0,r.jsxs)(c.p,{children:[(0,r.jsx)(c.code,{children:'toast("当前选中状态：" + checked)'}),":使用 toast 函数显示当前的选中状态。"]}),"\n",(0,r.jsx)(c.p,{children:"设置勾选框状态"}),"\n",(0,r.jsx)(c.p,{children:"要设置勾选框控件的选中状态，可以直接修改 ui.cb.checked 属性的值。以下是一个设置勾选框状态的示例代码："}),"\n",(0,r.jsx)(c.pre,{children:(0,r.jsx)(c.code,{className:"language-js",children:"ui.cb.checked = true; // 设置勾选框为选中状态\n"})}),"\n",(0,r.jsx)(c.p,{children:"或者，你也可以在创建勾选框控件时，通过 checked 属性来设置初始状态，如之前所示。"}),"\n",(0,r.jsx)(c.p,{children:"3.监听勾选框事件"}),"\n",(0,r.jsx)(c.p,{children:"除了 check 事件外，还可以为勾选框控件注册其他事件监听器，例如 click 事件。以下是一个监听勾选框点击事件的示例代码："}),"\n",(0,r.jsx)(c.pre,{children:(0,r.jsx)(c.code,{className:"language-js",children:'ui.cb.on("click", function () {\r\n    toast("勾选框被点击");\r\n});\n'})}),"\n",(0,r.jsx)(c.p,{children:"在上述代码中："}),"\n",(0,r.jsxs)(c.p,{children:[(0,r.jsx)(c.code,{children:' ui.cb.on("click", function() {...})'}),":为勾选框控件注册了一个 click 事件监听器，当用户点击勾选框时，会触发该事件。"]}),"\n",(0,r.jsxs)(c.p,{children:[(0,r.jsx)(c.code,{children:'toast("勾选框被点击")'}),":使用 toast 函数显示一条提示信息，表示勾选框被点击。"]}),"\n",(0,r.jsx)(c.p,{children:"4.完整示例"}),"\n",(0,r.jsx)(c.p,{children:"以下是一个完整的示例代码，演示了如何创建勾选框控件、获取和设置其状态，以及监听相关事件："}),"\n",(0,r.jsx)(c.pre,{children:(0,r.jsx)(c.code,{className:"language-js",children:'"ui";\r\n\r\nui.layout(\r\n    <vertical padding="16">\r\n        <checkbox id="cb" text="同意条款" checked="{{false}}" />\r\n        <button id="btnGetState" text="获取选中状态" />\r\n        <button id="btnSetState" text="设置为选中" />\r\n    </vertical>\r\n);\r\n\r\n// 监听勾选框的check事件\r\nui.cb.on("check", function (checked) {\r\n    toast("当前选中状态：" + checked);\r\n});\r\n\r\n// 监听获取状态按钮的点击事件\r\nui.btnGetState.on("click", function () {\r\n    toast("当前选中状态：" + ui.cb.checked);\r\n});\r\n\r\n// 监听设置状态按钮的点击事件\r\nui.btnSetState.on("click", function () {\r\n    ui.cb.checked = true; // 设置勾选框为选中状态\r\n});\n'})}),"\n",(0,r.jsx)(c.p,{children:"在上述代码中:"}),"\n",(0,r.jsxs)(c.p,{children:["创建了一个勾选框控件（",(0,r.jsx)(c.code,{children:'id="cb"'}),"），并设置了初始状态为未选中。"]}),"\n",(0,r.jsx)(c.p,{children:"添加了两个按钮控件，分别用于获取勾选框的当前状态和设置勾选框为选中状态。"}),"\n",(0,r.jsx)(c.p,{children:"为勾选框控件注册了 check 事件监听器，用于实时显示当前的选中状态。"}),"\n",(0,r.jsx)(c.p,{children:"为获取状态按钮注册了 click 事件监听器，用于显示当前的选中状态。"}),"\n",(0,r.jsx)(c.p,{children:"为设置状态按钮注册了 click 事件监听器，用于将勾选框设置为选中状态。"}),"\n",(0,r.jsx)(c.p,{children:(0,r.jsx)(c.strong,{children:"官方教程："})}),"\n",(0,r.jsx)(c.p,{children:"checkbox 控件即复选框，提供勾选交互的控件。"}),"\n",(0,r.jsxs)(c.p,{children:["参见 Android ",(0,r.jsx)(c.a,{href:"https://developer.android.google.cn/reference/android/widget/CheckBox",target:"_blank",rel:"noopener noreferrer",children:"CheckBox"})]}),"\n",(0,r.jsxs)(c.p,{children:[(0,r.jsx)(c.code,{children:"text"}),":"]}),"\n",(0,r.jsxs)(c.p,{children:["checkbox 控件的文本，显示在勾选框后面。实际上 checkbox 控件继承于",(0,r.jsx)(c.a,{href:"http://localhost/docs/zh/v8/ui/advanced.html#%E6%96%87%E6%9C%AC%E6%8E%A7%E4%BB%B6-text",target:"_blank",rel:"noopener noreferrer",children:"text"}),"和",(0,r.jsx)(c.a,{href:"http://localhost/docs/zh/v8/ui/advanced.html#%E6%8C%89%E9%92%AE%E6%8E%A7%E4%BB%B6-button",target:"_blank",rel:"noopener noreferrer",children:"button"}),"控件，它们的属性也可以用在 checkbox 上，比如",(0,r.jsx)(c.code,{children:"textSize"}),", ",(0,r.jsx)(c.code,{children:"textStyle"}),"。"]}),"\n",(0,r.jsxs)(c.p,{children:[(0,r.jsx)(c.code,{children:"checked"}),":"]}),"\n",(0,r.jsxs)(c.p,{children:["设置 checkbox 的选中状态，当",(0,r.jsx)(c.code,{children:'checked="true"'}),"为选中选项框，否则为未选中选项框。可以通过 attr 方法动态设置勾选框的状态。比如：",(0,r.jsx)(c.code,{children:'$ui.checkbox1.attr("checked", "true")'}),"。"]}),"\n",(0,r.jsxs)(c.p,{children:[(0,r.jsx)(c.code,{children:"enabled"}),":"]}),"\n",(0,r.jsxs)(c.p,{children:["设置复选框是否是启用的，若",(0,r.jsx)(c.code,{children:'enabled="false"'}),"则为禁用状态，显示未灰色，无法交互。"]}),"\n",(0,r.jsxs)(c.p,{children:[(0,r.jsx)(c.code,{children:"isChecked()"}),":"]}),"\n",(0,r.jsxs)(c.ul,{children:["\n",(0,r.jsx)(c.li,{children:"返回 {boolean}"}),"\n"]}),"\n",(0,r.jsxs)(c.p,{children:["通过 isChecked 可以检测选项框当前是否被选中。如果被选中则返回为",(0,r.jsx)(c.code,{children:"true"}),"，否则为",(0,r.jsx)(c.code,{children:"false"}),"。"]}),"\n",(0,r.jsxs)(c.p,{children:["事件: ",(0,r.jsx)(c.code,{children:"check"}),":"]}),"\n",(0,r.jsxs)(c.ul,{children:["\n",(0,r.jsxs)(c.li,{children:[(0,r.jsx)(c.code,{children:"checked"})," {boolean} 是否被勾选"]}),"\n",(0,r.jsxs)(c.li,{children:[(0,r.jsx)(c.code,{children:"view"})," {View} 当前事件的 View"]}),"\n"]}),"\n",(0,r.jsx)(c.p,{children:"当用户勾选/取消勾选选项框时会触发该事件。"}),"\n",(0,r.jsx)(c.p,{children:"例子:"}),"\n",(0,r.jsx)(c.pre,{children:(0,r.jsx)(c.code,{className:"language-js",children:'"ui";\r\nui.layout(\r\n    <vertical padding="16">\r\n        <checkbox id="cb1" text="复选框" />\r\n        <checkbox id="cb2" checked="true" text="勾选的复选框" />\r\n        <checkbox id="cb3" text="被禁用的复选框" enabled="false" />\r\n    </vertical>\r\n);\r\n\r\nui.cb1.on("check", (checked) => {\r\n    if (checked) {\r\n        toast("第一个框被勾选了");\r\n    } else {\r\n        toast("第一个框被取消勾选了");\r\n    }\r\n});\r\n\r\n// 修改cb3的checked属性\r\n$ui.cb3.attr("checked", "true");\n'})})]})}function i(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:c}=Object.assign({},(0,d.ah)(),e.components);return c?(0,r.jsx)(c,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}let h=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["v1%2F%E5%9F%BA%E7%A1%80%2Fui%2Fcheckbox.md"]={toc:[],title:"勾选框控件: checkbox",headingTitle:"勾选框控件: checkbox",frontmatter:{}}}}]);