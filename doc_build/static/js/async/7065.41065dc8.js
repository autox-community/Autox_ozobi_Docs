"use strict";(self.webpackChunkrepress_demo=self.webpackChunkrepress_demo||[]).push([["7065"],{5366:function(e,n,a){a.r(n),a.d(n,{default:()=>c});var t=a(2676),s=a(453);function l(e){let n=Object.assign({h1:"h1",a:"a",p:"p",div:"div",pre:"pre",code:"code"},(0,s.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"event-stream",children:["event-stream",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#event-stream",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"v6.4.0 新增"}),"\n",(0,t.jsxs)(n.div,{className:"rspress-directive tip",children:[(0,t.jsx)(n.div,{className:"rspress-directive-title",children:"稳定性: 稳定"}),(0,t.jsx)(n.div,{className:"rspress-directive-content",children:"\n"})]}),"\n",(0,t.jsx)(n.p,{children:"来自 npm 模块 event-stream，如需使用，请用"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'const es = require("event-stream");\n'})}),"\n",(0,t.jsxs)(n.p,{children:["该模块用于便捷的创建流，完整说明见",(0,t.jsx)(n.a,{href:"https://github.com/dominictarr/event-stream",target:"_blank",rel:"noopener noreferrer",children:"项目主页"}),"\n可读流:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'es.readable(function (count, callback) {\n    if (streamHasEnded) return this.emit("end");\n\n    //...\n\n    this.emit("data", data); //use this way to emit multiple chunks per call.\n\n    callback(); // you MUST always call the callback eventually.\n    // the function will not be called again until you do this.\n});\n'})}),"\n",(0,t.jsx)(n.p,{children:"转换流:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'var es = require("event-stream");\nes.map(function (data, callback) {\n    //transform data\n    // ...\n    callback(null, data);\n});\n'})}),"\n",(0,t.jsx)(n.p,{children:"可写流:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"var es = require('event-stream')\nes.map(function (data, callback) {\n  // ...\n  callback(null, null)\n})\n\n"})}),"\n",(0,t.jsx)(n.p,{children:"例子:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'const es = require("event-stream");\n\n//创建一个可读流\nlet e = 0;\nlet r = es.readable(function (count, callback) {\n    if (e > 10) return this.emit("end");\n    this.emit("data", String(e));\n    e++;\n    return callback();\n});\n//转换流\nlet map = es.map(function (data, callback) {\n    data = `--${data}--`;\n    callback(null, data);\n});\n\n//可写流，这里是将数据打印出来\nlet w = es.map(function (data, callback) {\n    log(data);\n    callback(null, null);\n});\n\nw.on("close", () => {\n    log("操作完成");\n});\n\nr.pipe(map).pipe(w); //将3个流连起来\n'})}),"\n",(0,t.jsx)(n.p,{children:"例子 2（配合 io 流使用）:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'const es = require("event-stream");\nconst stream = require("stream");\n\nlet r = stream.createFileReadStream("/sdcard/文本文件.txt");\n\n//可写流，这里是将数据打印出来\nlet w = es.map(function (data, callback) {\n    log(data);\n    callback(null, null);\n});\n\n//连通流，其中es.split()是一个流，负责将数据按行输出\nr.pipe(es.split()).pipe(w);\n'})})]})}function r(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}let c=r;r.__RSPRESS_PAGE_META={},r.__RSPRESS_PAGE_META["v1%2Fnpm%E6%A8%A1%E5%9D%97%2Fevent-stream.md"]={toc:[],title:"event-stream",headingTitle:"event-stream",frontmatter:{}}}}]);