"use strict";(self.webpackChunkrepress_demo=self.webpackChunkrepress_demo||[]).push([["8113"],{684:function(e,i,s){s.r(i),s.d(i,{default:()=>l});var r=s(2676),n=s(453);function c(e){let i=Object.assign({h1:"h1",a:"a",p:"p",pre:"pre",code:"code",strong:"strong",ul:"ul",li:"li",h2:"h2"},(0,n.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(i.h1,{id:"uiselector",children:["UiSelector",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#uiselector",children:"#"})]}),"\n",(0,r.jsx)(i.p,{children:"UiSelector 即选择器，用于通过各种条件选取屏幕上的控件，再对这些控件进行点击、长按等动作。这里需要先简单介绍一下控件和界面的相关知识。"}),"\n",(0,r.jsx)(i.p,{children:"一般软件的界面是由一个个控件构成的，例如图片部分是一个图片控件(ImageView)，文字部分是一个文字控件(TextView)；同时，通过各种布局来决定各个控件的位置，例如，线性布局(LinearLayout)里面的控件都是按水平或垂直一次叠放的，列表布局(AbsListView)则是以列表的形式显示控件。"}),"\n",(0,r.jsx)(i.p,{children:'控件有各种属性，包括文本(text), 描述(desc), 类名(className), id 等等。我们通常用一个控件的属性来找到这个控件，例如，想要点击 QQ 聊天窗口的"发送"按钮，我们就可以通过他的文本属性为"发送"来找到这个控件并点击他，具体代码为:'}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-js",children:'var sendButton = text("发送").findOne();\r\nsendButton.click();\n'})}),"\n",(0,r.jsxs)(i.p,{children:["在这个例子中, ",(0,r.jsx)(i.code,{children:'text("发送")'}),'表示一个条件(文本属性为"发送")，',(0,r.jsx)(i.code,{children:"findOne()"}),"表示基于这个条件找到一个符合条件的控件，从而我们可以得到发送按钮 sendButton，再执行",(0,r.jsx)(i.code,{children:"sendButton.click()"}),'即可点击"发送"按钮。']}),"\n",(0,r.jsx)(i.p,{children:"用文本属性来定位按钮控件、文本控件通常十分有效。但是，如果一个控件是图片控件，比如 Auto.js 主界面右上角的搜索图标，他没有文本属性，这时需要其他属性来定位他。我们如何查看他有什么属性呢？首先打开悬浮窗和无障碍服务，点击蓝色的图标(布局分析), 可以看到以下界面："}),"\n",(0,r.jsx)(i.p,{children:"之后我们点击搜索图标，可以看到他有以下属性："}),"\n",(0,r.jsx)(i.p,{children:'我们注意到这个图标的 desc(描述)属性为"搜索"，那么我们就可以通过 desc 属性来定位这个控件，得到点击搜索图标的代码为:'}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-js",children:'desc("搜索").findOne().click();\n'})}),"\n",(0,r.jsxs)(i.p,{children:["可能心细的你可能注意到了，这个控件还有很多其他的属性，例如 checked, className, clickable 等等，为什么不用这些属性来定位搜索图标呢？答案是，其他控件也有这些值相同的属性、尝试一下你就可以发现很多其他控件的 checked 属性和搜索控件一样都是",(0,r.jsx)(i.code,{children:"false"}),"，如果我们用",(0,r.jsx)(i.code,{children:"checked(false)"}),"作为条件，将会找到很多控件，而无法确定哪一个是搜索图标。因此，要找到我们想要的那个控件，",(0,r.jsx)(i.strong,{children:"选择器的条件通常需要是可唯一确定控件的"}),'。我们通常用一个独一无二的属性来定位一个控件，例如这个例子中就没有其他控件的 desc(描述)属性为"搜索"。']}),"\n",(0,r.jsxs)(i.p,{children:["另外，对于这个搜索图标而言，id 属性也是唯一的，我们也可以用",(0,r.jsx)(i.code,{children:'id("action_search").findOne().click()'}),"来点击这个控件。如果一个控件有 id 属性，那么这个属性很可能是唯一的，除了以下几种情况："]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:'QQ 的控件的 id 属性很多都是"name"，也就是在 QQ 界面难以通过 id 来定位一个控件'}),"\n",(0,r.jsx)(i.li,{children:"列表中的控件，比如 QQ 联系人列表，微信联系人列表等"}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:"尽管 id 属性很方便，但也不总是最方便的，例如对于微信和网易云音乐，每次更新他的控件 id 都会变化，导致了相同代码对于不同版本的微信、网易云音乐并不兼容。"}),"\n",(0,r.jsx)(i.p,{children:"除了这些属性外，主要还有以下几种属性："}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"className"}),' 类名。类名表示一个控件的类型，例如文本控件为"android.widget.TextView", 图片控件为"android.widget.ImageView"等。']}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"packageName"}),' 包名。包名表示控件所在的应用包名，例如 QQ 界面的控件的包名为"com.tencent.mobileqq"。']}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"bounds"})," 控件在屏幕上的范围。"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"drawingOrder"})," 控件在父控件的绘制顺序。"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"indexInParent"})," 控件在父控件的位置。"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"clickable"})," 控件是否可点击。"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"longClickable"})," 控件是否可长按。"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"checkable"})," 控件是否可勾选。"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"checked"})," 控件是否可已勾选。"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"scrollable"})," 控件是否可滑动。"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"selected"})," 控件是否已选择。"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"editable"})," 控件是否可编辑。"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"visibleToUser"})," 控件是否可见。"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"enabled"})," 控件是否已启用。"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"depth"})," 控件的布局深度。"]}),"\n"]}),"\n",(0,r.jsxs)(i.p,{children:["有时候只靠一个属性并不能唯一确定一个控件，这时需要通过属性的组合来完成定位，例如",(0,r.jsx)(i.code,{children:'className("ImageView").depth(10).findOne().click()'}),"，通过链式调用来组合条件。"]}),"\n",(0,r.jsx)(i.p,{children:'通常用这些技巧便可以解决大部分问题，即使解决不了问题，也可以通过布局分析的"生成代码"功能来尝试生成一些选择器代码。接下来的问题便是对选取的控件进行操作，包括：'}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"click()"})," 点击。点击一个控件，前提是这个控件的 clickable 属性为 true"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"longClick()"})," 长按。长按一个控件，前提是这个控件的 longClickable 属性为 true"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"setText()"})," 设置文本，用于编辑框控件设置文本。"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"scrollForward()"}),", ",(0,r.jsx)(i.code,{children:"scrollBackward()"})," 滑动。滑动一个控件(列表等), 前提是这个控件的 scrollable 属性为 true"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"exits()"})," 判断控件是否存在"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"waitFor()"})," 等待控件出现"]}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:'这些操作包含了绝大部分控件操作。根据这些我们可以很容易写出一个"刷屏"脚本(代码仅为示例，请不要在别人的群里测试，否则容易被踢):'}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-js",children:'while (true) {\r\n    className("EditText").findOne().setText("刷屏...");\r\n    text("发送").findOne().clicK();\r\n}\n'})}),"\n",(0,r.jsx)(i.p,{children:"上面这段代码也可以写成："}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-js",children:'while (true) {\r\n    className("EditText").setText("刷屏...");\r\n    text("发送").clicK();\r\n}\n'})}),"\n",(0,r.jsxs)(i.p,{children:["如果不加",(0,r.jsx)(i.code,{children:"findOne()"}),"而直接进行操作，则选择器会找出",(0,r.jsx)(i.strong,{children:"所有"}),"符合条件的控件并操作。"]}),"\n",(0,r.jsxs)(i.p,{children:["另外一个比较常用的操作的滑动。滑动操作的第一步是找到需要滑动的控件，例如要滑动 QQ 消息列表则在悬浮窗布局层次分析中找到",(0,r.jsx)(i.code,{children:"AbsListView"}),"，这个控件就是消息列表控件，如下图："]}),"\n",(0,r.jsx)(i.p,{children:'长按可查看控件信息，注意到其 scrollable 属性为 true，并找出其 id 为"recent_chat_list"，从而下滑 QQ 消息列表的代码为：'}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-js",children:'id("recent_chat_list").className("AbsListView").findOne().scrollForward();\n'})}),"\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.code,{children:"scrollForward()"}),"为向前滑，包括下滑和右滑。"]}),"\n",(0,r.jsx)(i.p,{children:"选择器的入门教程暂且要这里，更多信息可以查看下面的文档和选择器进阶。"}),"\n",(0,r.jsxs)(i.h2,{id:"selector",children:["selector()",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#selector",children:"#"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"返回 {UiSelector}"}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:"创建一个新的选择器。但一般情况不需要使用该函数，因为可以直接用相应条件的语句创建选择器。"}),"\n",(0,r.jsxs)(i.p,{children:["由于历史遗留原因，本不应该这样设计(不应该让",(0,r.jsx)(i.code,{children:"id()"}),", ",(0,r.jsx)(i.code,{children:"text()"}),"等作为全局函数，而是应该用",(0,r.jsx)(i.code,{children:"By.id()"}),", ",(0,r.jsx)(i.code,{children:"By.text()"}),")，但为了后向兼容性只能保留这个设计。"]}),"\n",(0,r.jsx)(i.p,{children:'这样的 API 设计会污染全局变量，后续可能会支持"去掉这些全局函数而使用 By.***"的选项。'}),"\n",(0,r.jsxs)(i.h2,{id:"uiselectortextstr",children:["UiSelector.text(str)",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#uiselectortextstr",children:"#"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"str"})," {string} 控件文本"]}),"\n",(0,r.jsx)(i.li,{children:"返回 {UiSelector} 返回选择器自身以便链式调用"}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:'为当前选择器附加控件"text 等于字符串 str"的筛选条件。'}),"\n",(0,r.jsx)(i.p,{children:'控件的 text(文本)属性是文本控件上的显示的文字，例如微信左上角的"微信"文本。'}),"\n",(0,r.jsxs)(i.h2,{id:"uiselectortextcontainsstr",children:["UiSelector.textContains(str)",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#uiselectortextcontainsstr",children:"#"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"str"})," {string} 要包含的字符串"]}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:'为当前选择器附加控件"text 需要包含字符串 str"的筛选条件。'}),"\n",(0,r.jsxs)(i.p,{children:['这是一个比较有用的条件，例如 QQ 动态页和微博发现页上方的"大家都在搜...."的控件可以用',(0,r.jsx)(i.code,{children:'textContains("大家都在搜").findOne()'}),"来获取。"]}),"\n",(0,r.jsxs)(i.h2,{id:"uiselectortextstartswithprefix",children:["UiSelector.textStartsWith(prefix)",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#uiselectortextstartswithprefix",children:"#"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"prefix"})," {string} 前缀"]}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:'为当前选择器附加控件"text 需要以 prefix 开头"的筛选条件。'}),"\n",(0,r.jsxs)(i.p,{children:['这也是一个比较有用的条件，例如要找出 Auto.js 脚本列表中名称以"QQ"开头的脚本的代码为',(0,r.jsx)(i.code,{children:'textStartsWith("QQ").find()'}),"。"]}),"\n",(0,r.jsxs)(i.h2,{id:"uiselectortextendswithsuffix",children:["UiSelector.textEndsWith(suffix)",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#uiselectortextendswithsuffix",children:"#"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"suffix {string} 后缀"}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:'为当前选择器附加控件"text 需要以 suffix 结束"的筛选条件。'}),"\n",(0,r.jsxs)(i.h2,{id:"uiselectortextmatchesreg",children:["UiSelector.textMatches(reg)",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#uiselectortextmatchesreg",children:"#"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"reg"})," {string} | {Regex} 要满足的正则表达式。"]}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:'为当前选择器附加控件"text 需要满足正则表达式 reg"的条件。'}),"\n",(0,r.jsxs)(i.p,{children:["有关正则表达式，可以查看",(0,r.jsx)(i.a,{href:"http://www.runoob.com/Stringp/Stringp-example.html",target:"_blank",rel:"noopener noreferrer",children:"正则表达式 - 菜鸟教程"}),"。"]}),"\n",(0,r.jsxs)(i.p,{children:["需要注意的是，如果正则表达式是字符串，则需要使用",(0,r.jsx)(i.code,{children:"\\\\"}),"来表达",(0,r.jsx)(i.code,{children:"\\"}),"(也即 Java 正则表达式的形式)，例如",(0,r.jsx)(i.code,{children:'textMatches("\\\\d+")'}),"匹配多位数字；但如果使用 JavaScript 语法的正则表达式则不需要，例如",(0,r.jsx)(i.code,{children:"textMatches(/\\d+/)"}),'。但如果使用字符串的正则表达式则该字符串不能以"/"同时以"/"结束，也即不能写诸如',(0,r.jsx)(i.code,{children:'textMatches("/\\\\d+/")'}),'的表达式，否则会被开头的"/"和结尾的"/"会被忽略。']}),"\n",(0,r.jsxs)(i.h2,{id:"uiselectordescstr",children:["UiSelector.desc(str)",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#uiselectordescstr",children:"#"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"str"})," {string} 控件文本"]}),"\n",(0,r.jsx)(i.li,{children:"返回 {UiSelector} 返回选择器自身以便链式调用"}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:'为当前选择器附加控件"desc 等于字符串 str"的筛选条件。'}),"\n",(0,r.jsx)(i.p,{children:"控件的 desc(描述，全称为 Content-Description)属性是对一个控件的描述，例如网易云音乐右上角的放大镜图标的描述为搜索。要查看一个控件的描述，同样地可以借助悬浮窗查看。"}),"\n",(0,r.jsx)(i.p,{children:"desc 属性同样是定位控件的利器。"}),"\n",(0,r.jsxs)(i.h2,{id:"uiselectordesccontainsstr",children:["UiSelector.descContains(str)",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#uiselectordesccontainsstr",children:"#"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"str"})," {string} 要包含的字符串"]}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:'为当前选择器附加控件"desc 需要包含字符串 str"的筛选条件。'}),"\n",(0,r.jsxs)(i.h2,{id:"uiselectordescstartswithprefix",children:["UiSelector.descStartsWith(prefix)",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#uiselectordescstartswithprefix",children:"#"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"prefix"})," {string} 前缀"]}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:'为当前选择器附加控件"desc 需要以 prefix 开头"的筛选条件。'}),"\n",(0,r.jsxs)(i.h2,{id:"uiselectordescendswithsuffix",children:["UiSelector.descEndsWith(suffix)",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#uiselectordescendswithsuffix",children:"#"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"suffix"})," {string} 后缀"]}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:'为当前选择器附加控件"desc 需要以 suffix 结束"的筛选条件。'}),"\n",(0,r.jsxs)(i.h2,{id:"uiselectordescmatchesreg",children:["UiSelector.descMatches(reg)",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#uiselectordescmatchesreg",children:"#"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"reg"})," {string} | {Regex} 要满足的正则表达式。"]}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:'为当前选择器附加控件"desc 需要满足正则表达式 reg"的条件。'}),"\n",(0,r.jsxs)(i.p,{children:["有关正则表达式，可以查看",(0,r.jsx)(i.a,{href:"http://www.runoob.com/Stringp/Stringp-example.html",target:"_blank",rel:"noopener noreferrer",children:"正则表达式 - 菜鸟教程"}),"。"]}),"\n",(0,r.jsxs)(i.p,{children:["需要注意的是，如果正则表达式是字符串，则需要使用",(0,r.jsx)(i.code,{children:"\\\\"}),"来表达",(0,r.jsx)(i.code,{children:"\\"}),"(也即 Java 正则表达式的形式)，例如",(0,r.jsx)(i.code,{children:'textMatches("\\\\d+")'}),"匹配多位数字；但如果使用 JavaScript 语法的正则表达式则不需要，例如",(0,r.jsx)(i.code,{children:"textMatches(/\\d+/)"}),'。但如果使用字符串的正则表达式则该字符串不能以"/"同时以"/"结束，也即不能写诸如',(0,r.jsx)(i.code,{children:'textMatches("/\\\\d+/")'}),'的表达式，否则会被开头的"/"和结尾的"/"会被忽略。']}),"\n",(0,r.jsxs)(i.h2,{id:"uiselectoridresid",children:["UiSelector.id(resId)",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#uiselectoridresid",children:"#"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"resId"}),' {string} 控件的 id，以"包名:id/"开头，例如"com.tencent.mm:id/send_btn"。',(0,r.jsx)(i.strong,{children:"也可以不指定包名"}),'，这时会以当前正在运行的应用的包名来补全 id。例如 id("send_btn"),在 QQ 界面想当于 id("com.tencent.mobileqq:id/send_btn")。']}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:'为当前选择器附加"id 等于 resId"的筛选条件。'}),"\n",(0,r.jsx)(i.p,{children:"控件的 id 属性通常是可以用来确定控件的唯一标识，如果一个控件有 id，那么使用 id 来找到他是最好的方法。要查看屏幕上的控件的 id，可以开启悬浮窗并使用界面工具，点击相应控件即可查看。若查看到的控件 id 为 null, 表示该控件没有 id。另外，在列表中会出现多个控件的 id 相同的情况。例如微信的联系人列表，每个头像的 id 都是一样的。此时不能用 id 来唯一确定控件。"}),"\n",(0,r.jsx)(i.p,{children:'在 QQ 界面经常会出现多个 id 为"name"的控件，在微信上则每个版本的 id 都会变化。对于这些软件而言比较难用 id 定位控件。'}),"\n",(0,r.jsxs)(i.h2,{id:"uiselectoridcontainsstr",children:["UiSelector.idContains(str)",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#uiselectoridcontainsstr",children:"#"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"str"})," {string} id 要包含的字符串"]}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:'为当前选择器附加控件"id 包含字符串 str"的筛选条件。比较少用。'}),"\n",(0,r.jsxs)(i.h2,{id:"uiselectoridstartswithprefix",children:["UiSelector.idStartsWith(prefix)",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#uiselectoridstartswithprefix",children:"#"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"prefix"})," {string} id 前缀"]}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:'为当前选择器附加"id 需要以 prefix 开头"的筛选条件。比较少用。'}),"\n",(0,r.jsxs)(i.h2,{id:"uiselectoridendswithsuffix",children:["UiSelector.idEndsWith(suffix)",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#uiselectoridendswithsuffix",children:"#"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"suffix"})," {string} id 后缀"]}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:'为当前选择器附加"id 需要以 suffix 结束"的筛选条件。比较少用。'}),"\n",(0,r.jsxs)(i.h2,{id:"uiselectoridmatchesreg",children:["UiSelector.idMatches(reg)",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#uiselectoridmatchesreg",children:"#"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"reg {Regex} | {string} id 要满足的正则表达式"}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:"附加 id 需要满足正则表达式。"}),"\n",(0,r.jsxs)(i.p,{children:["需要注意的是，如果正则表达式是字符串，则需要使用",(0,r.jsx)(i.code,{children:"\\\\"}),"来表达",(0,r.jsx)(i.code,{children:"\\"}),"(也即 Java 正则表达式的形式)，例如",(0,r.jsx)(i.code,{children:'textMatches("\\\\d+")'}),"匹配多位数字；但如果使用 JavaScript 语法的正则表达式则不需要，例如",(0,r.jsx)(i.code,{children:"textMatches(/\\d+/)"}),'。但如果使用字符串的正则表达式则该字符串不能以"/"同时以"/"结束，也即不能写诸如',(0,r.jsx)(i.code,{children:'textMatches("/\\\\d+/")'}),'的表达式，否则会被开头的"/"和结尾的"/"会被忽略。']}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-js",children:'idMatches("[a-zA-Z]+");\n'})}),"\n",(0,r.jsxs)(i.h2,{id:"uiselectorclassnamestr",children:["UiSelector.className(str)",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#uiselectorclassnamestr",children:"#"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"str"})," {string} 控件文本"]}),"\n",(0,r.jsx)(i.li,{children:"返回 {UiSelector} 返回选择器自身以便链式调用"}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:'为当前选择器附加控件"className 等于字符串 str"的筛选条件。'}),"\n",(0,r.jsx)(i.p,{children:"控件的 className(类名)表示一个控件的类别，例如文本控件的类名为 android.widget.TextView。"}),"\n",(0,r.jsxs)(i.p,{children:['如果一个控件的类名以"android.widget."开头，则可以省略这部分，例如文本控件可以直接用',(0,r.jsx)(i.code,{children:'className("TextView")'}),"的选择器。"]}),"\n",(0,r.jsx)(i.p,{children:"常见控件的类名如下："}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"android.widget.TextView"})," 文本控件"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"android.widget.ImageView"})," 图片控件"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"android.widget.Button"})," 按钮控件"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"android.widget.EditText"})," 输入框控件"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"android.widget.AbsListView"})," 列表控件"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"android.widget.LinearLayout"})," 线性布局"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"android.widget.FrameLayout"})," 帧布局"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"android.widget.RelativeLayout"})," 相对布局"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"android.widget.RelativeLayout"})," 相对布局"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"android.support.v7.widget.RecyclerView"})," 通常也是列表控件"]}),"\n"]}),"\n",(0,r.jsxs)(i.h2,{id:"uiselectorclassnamecontainsstr",children:["UiSelector.classNameContains(str)",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#uiselectorclassnamecontainsstr",children:"#"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"str"})," {string} 要包含的字符串"]}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:'为当前选择器附加控件"className 需要包含字符串 str"的筛选条件。'}),"\n",(0,r.jsxs)(i.h2,{id:"uiselectorclassnamestartswithprefix",children:["UiSelector.classNameStartsWith(prefix)",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#uiselectorclassnamestartswithprefix",children:"#"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"prefix"})," {string} 前缀"]}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:'为当前选择器附加控件"className 需要以 prefix 开头"的筛选条件。'}),"\n",(0,r.jsxs)(i.h2,{id:"uiselectorclassnameendswithsuffix",children:["UiSelector.classNameEndsWith(suffix)",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#uiselectorclassnameendswithsuffix",children:"#"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"suffix"})," {string} 后缀"]}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:'为当前选择器附加控件"className 需要以 suffix 结束"的筛选条件。'}),"\n",(0,r.jsxs)(i.h2,{id:"uiselectorclassnamematchesreg",children:["UiSelector.classNameMatches(reg)",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#uiselectorclassnamematchesreg",children:"#"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"reg"})," {string} | {Regex} 要满足的正则表达式。"]}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:'为当前选择器附加控件"className 需要满足正则表达式 reg"的条件。'}),"\n",(0,r.jsxs)(i.p,{children:["有关正则表达式，可以查看",(0,r.jsx)(i.a,{href:"http://www.runoob.com/Stringp/Stringp-example.html",target:"_blank",rel:"noopener noreferrer",children:"正则表达式 - 菜鸟教程"}),"。"]}),"\n",(0,r.jsxs)(i.p,{children:["需要注意的是，如果正则表达式是字符串，则需要使用",(0,r.jsx)(i.code,{children:"\\\\"}),"来表达",(0,r.jsx)(i.code,{children:"\\"}),"(也即 Java 正则表达式的形式)，例如",(0,r.jsx)(i.code,{children:'textMatches("\\\\d+")'}),"匹配多位数字；但如果使用 JavaScript 语法的正则表达式则不需要，例如",(0,r.jsx)(i.code,{children:"textMatches(/\\d+/)"}),'。但如果使用字符串的正则表达式则该字符串不能以"/"同时以"/"结束，也即不能写诸如',(0,r.jsx)(i.code,{children:'textMatches("/\\\\d+/")'}),'的表达式，否则会被开头的"/"和结尾的"/"会被忽略。']}),"\n",(0,r.jsxs)(i.h2,{id:"uiselectorpackagenamestr",children:["UiSelector.packageName(str)",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#uiselectorpackagenamestr",children:"#"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"str"})," {string} 控件文本"]}),"\n",(0,r.jsx)(i.li,{children:"返回 {UiSelector} 返回选择器自身以便链式调用"}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:'为当前选择器附加控件"packageName 等于字符串 str"的筛选条件。'}),"\n",(0,r.jsx)(i.p,{children:'控件的 packageName 表示控件所属界面的应用包名。例如微信的包名为"com.tencent.mm", 那么微信界面的控件的 packageName 为"com.tencent.mm"。'}),"\n",(0,r.jsxs)(i.p,{children:["要查看一个应用的包名，可以用函数",(0,r.jsx)(i.code,{children:"app.getPackageName()"}),"获取，例如",(0,r.jsx)(i.code,{children:'toast(app.getPackageName("微信"))'}),"。"]}),"\n",(0,r.jsxs)(i.h2,{id:"uiselectorpackagenamecontainsstr",children:["UiSelector.packageNameContains(str)",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#uiselectorpackagenamecontainsstr",children:"#"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"str"})," {string} 要包含的字符串"]}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:'为当前选择器附加控件"packageName 需要包含字符串 str"的筛选条件。'}),"\n",(0,r.jsxs)(i.h2,{id:"uiselectorpackagenamestartswithprefix",children:["UiSelector.packageNameStartsWith(prefix)",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#uiselectorpackagenamestartswithprefix",children:"#"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"prefix"})," {string} 前缀"]}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:'为当前选择器附加控件"packageName 需要以 prefix 开头"的筛选条件。'}),"\n",(0,r.jsxs)(i.h2,{id:"uiselectorpackagenameendswithsuffix",children:["UiSelector.packageNameEndsWith(suffix)",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#uiselectorpackagenameendswithsuffix",children:"#"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"suffix"})," {string} 后缀"]}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:'为当前选择器附加控件"packageName 需要以 suffix 结束"的筛选条件。'}),"\n",(0,r.jsxs)(i.h2,{id:"uiselectorpackagenamematchesreg",children:["UiSelector.packageNameMatches(reg)",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#uiselectorpackagenamematchesreg",children:"#"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"reg"})," {string} | {Regex} 要满足的正则表达式。"]}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:'为当前选择器附加控件"packageName 需要满足正则表达式 reg"的条件。'}),"\n",(0,r.jsxs)(i.p,{children:["有关正则表达式，可以查看",(0,r.jsx)(i.a,{href:"http://www.runoob.com/Stringp/Stringp-example.html",target:"_blank",rel:"noopener noreferrer",children:"正则表达式 - 菜鸟教程"}),"。"]}),"\n",(0,r.jsxs)(i.h2,{id:"uiselectorboundsleft-top-right-buttom",children:["UiSelector.bounds(left, top, right, buttom)",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#uiselectorboundsleft-top-right-buttom",children:"#"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"left"})," {number} 控件左边缘与屏幕左边的距离"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"top"})," {number} 控件上边缘与屏幕上边的距离"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"right"})," {number} 控件右边缘与屏幕左边的距离"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"bottom"})," {number} 控件下边缘与屏幕上边的距离"]}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:"一个控件的 bounds 属性为这个控件在屏幕上显示的范围。我们可以用这个范围来定位这个控件。尽管用这个方法定位控件对于静态页面十分准确，却无法兼容不同分辨率的设备；同时对于列表页面等动态页面无法达到效果，因此使用不推荐该选择器。"}),"\n",(0,r.jsx)(i.p,{children:"注意参数的这四个数字不能随意填写，必须精确的填写控件的四个边界才能找到该控件。例如，要点击 QQ 主界面的右上角加号，我们用布局分析查看该控件的属性，如下图："}),"\n",(0,r.jsxs)(i.p,{children:["可以看到 bounds 属性为(951, 67, 1080, 196)，此时使用代码",(0,r.jsx)(i.code,{children:"bounds(951, 67, 1080, 196).clickable().click()"}),"即可点击该控件。"]}),"\n",(0,r.jsxs)(i.h2,{id:"uiselectorboundsinsideleft-top-right-buttom",children:["UiSelector.boundsInside(left, top, right, buttom)",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#uiselectorboundsinsideleft-top-right-buttom",children:"#"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"left"})," {number} 范围左边缘与屏幕左边的距离"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"top"})," {number} 范围上边缘与屏幕上边的距离"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"right"})," {number} 范围右边缘与屏幕左边的距离"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"bottom"})," {number} 范围下边缘与屏幕上边的距离"]}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:'为当前选择器附加控件"bounds 需要在 left, top, right, buttom 构成的范围里面"的条件。'}),"\n",(0,r.jsx)(i.p,{children:"这个条件用于限制选择器在某一个区域选择控件。例如要在屏幕上半部分寻找文本控件 TextView，代码为:"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-js",children:'var w = className("TextView")\r\n    .boundsInside(0, 0, device.width, device.height / 2)\r\n    .findOne();\r\nlog(w.text());\n'})}),"\n",(0,r.jsxs)(i.p,{children:["其中我们使用了",(0,r.jsx)(i.code,{children:"device.width"}),"来获取屏幕宽度，",(0,r.jsx)(i.code,{children:"device.height"}),"来获取屏幕高度。"]}),"\n",(0,r.jsxs)(i.h2,{id:"uiselectorboundscontainsleft-top-right-buttom",children:["UiSelector.boundsContains(left, top, right, buttom)",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#uiselectorboundscontainsleft-top-right-buttom",children:"#"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"left"})," {number} 范围左边缘与屏幕左边的距离"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"top"})," {number} 范围上边缘与屏幕上边的距离"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"right"})," {number} 范围右边缘与屏幕左边的距离"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"bottom"})," {number} 范围下边缘与屏幕上边的距离"]}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:'为当前选择器附加控件"bounds 需要包含 left, top, right, buttom 构成的范围"的条件。'}),"\n",(0,r.jsx)(i.p,{children:"这个条件用于限制控件的范围必须包含所给定的范围。例如给定一个点(500, 300), 寻找在这个点上的可点击控件的代码为:"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-js",children:"var w = boundsContains(500, 300, device.width - 500, device.height - 300)\r\n    .clickable()\r\n    .findOne();\r\nw.click();\n"})}),"\n",(0,r.jsxs)(i.h2,{id:"uiselectordrawingorderorder",children:["UiSelector.drawingOrder(order)",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#uiselectordrawingorderorder",children:"#"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"order {number} 控件在父视图中的绘制顺序"}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:'为当前选择器附加控件"drawingOrder 等于 order"的条件。'}),"\n",(0,r.jsx)(i.p,{children:"drawingOrder 为一个控件在父控件中的绘制顺序，通常可以用于区分同一层次的控件。"}),"\n",(0,r.jsx)(i.p,{children:"但该属性在 Android 7.0 以上才能使用。"}),"\n",(0,r.jsxs)(i.h2,{id:"uiselectorclickableb--true",children:["UiSelector.clickable([b = true])",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#uiselectorclickableb--true",children:"#"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"b"})," {Boolean} 表示控件是否可点击"]}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:"为当前选择器附加控件是否可点击的条件。但并非所有 clickable 为 false 的控件都真的不能点击，这取决于控件的实现。对于自定义控件(例如显示类名为 android.view.View 的控件)很多的 clickable 属性都为 false 都却能点击。"}),"\n",(0,r.jsxs)(i.p,{children:["需要注意的是，可以省略参数",(0,r.jsx)(i.code,{children:"b"}),"而表示选择那些可以点击的控件，例如",(0,r.jsx)(i.code,{children:'className("ImageView").clickable()'}),"表示可以点击的图片控件的条件，",(0,r.jsx)(i.code,{children:'className("ImageView").clickable(false)'}),"表示不可点击的图片控件的条件。"]}),"\n",(0,r.jsxs)(i.h2,{id:"uiselectorlongclickableb--true",children:["UiSelector.longClickable([b = true])",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#uiselectorlongclickableb--true",children:"#"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"b"})," {Boolean} 表示控件是否可长按"]}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:"为当前选择器附加控件是否可长按的条件。"}),"\n",(0,r.jsxs)(i.h2,{id:"uiselectorcheckableb--true",children:["UiSelector.checkable([b = true])",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#uiselectorcheckableb--true",children:"#"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"b"})," {Boolean} 表示控件是否可勾选"]}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:"为当前选择器附加控件是否可勾选的条件。勾选通常是对于勾选框而言的，例如图片多选时左上角通常有一个勾选框。"}),"\n",(0,r.jsxs)(i.h2,{id:"uiselectorselectedb--true",children:["UiSelector.selected([b = true])",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#uiselectorselectedb--true",children:"#"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"b"})," {Boolean} 表示控件是否被选"]}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:'为当前选择器附加控件是否已选中的条件。被选中指的是，例如 QQ 聊天界面点击下方的"表情按钮"时，会出现自己收藏的表情，这时"表情按钮"便处于选中状态，其 selected 属性为 true。'}),"\n",(0,r.jsxs)(i.h2,{id:"uiselectorenabledb--true",children:["UiSelector.enabled([b = true])",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#uiselectorenabledb--true",children:"#"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"b"})," {Boolean} 表示控件是否已启用"]}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:"为当前选择器附加控件是否已启用的条件。大多数控件都是启用的状态(enabled 为 true)，处于“禁用”状态通常是灰色并且不可点击。"}),"\n",(0,r.jsxs)(i.h2,{id:"uiselectorscrollableb--true",children:["UiSelector.scrollable([b = true])",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#uiselectorscrollableb--true",children:"#"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"b"})," {Boolean} 表示控件是否可滑动"]}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:"为当前选择器附加控件是否可滑动的条件。滑动包括上下滑动和左右滑动。"}),"\n",(0,r.jsx)(i.p,{children:"可以用这个条件来寻找可滑动控件来滑动界面。例如滑动 Auto.js 的脚本列表的代码为:"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-js",children:'className("android.support.v7.widget.RecyclerView").scrollable().findOne().scrollForward();\r\n//或者classNameEndsWith("RecyclerView").scrollable().findOne().scrollForward();\n'})}),"\n",(0,r.jsxs)(i.h2,{id:"uiselectoreditableb--true",children:["UiSelector.editable([b = true])",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#uiselectoreditableb--true",children:"#"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"b"})," {Boolean} 表示控件是否可编辑"]}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:"为当前选择器附加控件是否可编辑的条件。一般来说可编辑的控件为输入框(EditText)，但不是所有的输入框(EditText)都可编辑。"}),"\n",(0,r.jsxs)(i.h2,{id:"uiselectormultilineb--true",children:["UiSelector.multiLine([b = true])",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#uiselectormultilineb--true",children:"#"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"b {Boolean} 表示文本或输入框控件是否是多行显示的"}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:"为当前选择器附加控件是否文本或输入框控件是否是多行显示的条件。"}),"\n",(0,r.jsxs)(i.h2,{id:"uiselectorfindone",children:["UiSelector.findOne()",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#uiselectorfindone",children:"#"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:["返回 ",(0,r.jsx)(i.a,{href:"#uiobject",children:"UiObject"})]}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:"根据当前的选择器所确定的筛选条件，对屏幕上的控件进行搜索，直到屏幕上出现满足条件的一个控件为止，并返回该控件。如果找不到控件，当屏幕内容发生变化时会重新寻找，直至找到。"}),"\n",(0,r.jsxs)(i.p,{children:["需要注意的是，如果屏幕上一直没有出现所描述的控件，则该函数会阻塞，直至所描述的控件出现为止。因此此函数不会返回",(0,r.jsx)(i.code,{children:"null"}),"。"]}),"\n",(0,r.jsxs)(i.p,{children:["该函数本来应该命名为",(0,r.jsx)(i.code,{children:"untilFindOne()"}),"，但由于历史遗留原因已经无法修改。如果想要只在屏幕上搜索一次而不是一直搜索，请使用",(0,r.jsx)(i.code,{children:"findOnce()"}),"。"]}),"\n",(0,r.jsxs)(i.p,{children:["另外，如果屏幕上有多个满足条件的控件，",(0,r.jsx)(i.code,{children:"findOne()"}),"采用深度优先搜索(DFS)，会返回该搜索算法找到的第一个控件。注意控件找到的顺序有时会起到作用。"]}),"\n",(0,r.jsxs)(i.h2,{id:"uiselectorfindonetimeout",children:["UiSelector.findOne(timeout)",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#uiselectorfindonetimeout",children:"#"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"timeout"})," {number} 搜索的超时时间，单位毫秒"]}),"\n",(0,r.jsxs)(i.li,{children:["返回 ",(0,r.jsx)(i.a,{href:"#uiobject",children:"UiObject"})]}),"\n"]}),"\n",(0,r.jsxs)(i.p,{children:["根据当前的选择器所确定的筛选条件，对屏幕上的控件进行搜索，直到屏幕上出现满足条件的一个控件为止，并返回该控件；如果在 timeout 毫秒的时间内没有找到符合条件的控件，则终止搜索并返回",(0,r.jsx)(i.code,{children:"null"}),"。"]}),"\n",(0,r.jsxs)(i.p,{children:["该函数类似于不加参数的",(0,r.jsx)(i.code,{children:"findOne()"}),"，只不过加上了时间限制。"]}),"\n",(0,r.jsx)(i.p,{children:"示例："}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-js",children:'//启动Auto.js\r\nlaunchApp("Auto.js");\r\n//在6秒内找出日志图标的控件\r\nvar w = id("action_log").findOne(6000);\r\n//如果找到控件则点击\r\nif (w != null) {\r\n    w.click();\r\n} else {\r\n    //否则提示没有找到\r\n    toast("没有找到日志图标");\r\n}\n'})}),"\n",(0,r.jsxs)(i.h2,{id:"uiselectorfindonce",children:["UiSelector.findOnce()",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#uiselectorfindonce",children:"#"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:["返回 ",(0,r.jsx)(i.a,{href:"#uiobject",children:"UiObject"})]}),"\n"]}),"\n",(0,r.jsxs)(i.p,{children:["根据当前的选择器所确定的筛选条件，对屏幕上的控件进行搜索，如果找到符合条件的控件则返回该控件；否则返回",(0,r.jsx)(i.code,{children:"null"}),"。"]}),"\n",(0,r.jsxs)(i.h2,{id:"uiselectorfindoncei",children:["UiSelector.findOnce(i)",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#uiselectorfindoncei",children:"#"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"i"})," {number} 索引"]}),"\n"]}),"\n",(0,r.jsxs)(i.p,{children:["根据当前的选择器所确定的筛选条件，对屏幕上的控件进行搜索，并返回第 i + 1 个符合条件的控件；如果没有找到符合条件的控件，或者符合条件的控件个数 < i, 则返回",(0,r.jsx)(i.code,{children:"null"}),"。"]}),"\n",(0,r.jsx)(i.p,{children:"注意这里的控件次序，是搜索算法深度优先搜索(DSF)决定的。"}),"\n",(0,r.jsxs)(i.h2,{id:"uiselectorfind",children:["UiSelector.find()",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#uiselectorfind",children:"#"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:["返回 ",(0,r.jsx)(i.a,{href:"#uicollection",children:"UiCollection"})]}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:"根据当前的选择器所确定的筛选条件，对屏幕上的控件进行搜索，找到所有满足条件的控件集合并返回。这个搜索只进行一次，并不保证一定会找到，因而会出现返回的控件集合为空的情况。"}),"\n",(0,r.jsxs)(i.p,{children:["不同于",(0,r.jsx)(i.code,{children:"findOne()"}),"或者",(0,r.jsx)(i.code,{children:"findOnce()"}),"只找到一个控件并返回一个控件，",(0,r.jsx)(i.code,{children:"find()"}),"函数会找出所有满足条件的控件并返回一个控件集合。之后可以对控件集合进行操作。"]}),"\n",(0,r.jsx)(i.p,{children:"可以通过 empty()函数判断找到的是否为空。例如："}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-js",children:'var c = className("AbsListView").find();\r\nif (c.empty()) {\r\n    toast("没找到╭(╯^╰)╮");\r\n} else {\r\n    toast("找到啦");\r\n}\n'})}),"\n",(0,r.jsxs)(i.h2,{id:"uiselectoruntilfind",children:["UiSelector.untilFind()",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#uiselectoruntilfind",children:"#"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:["返回 ",(0,r.jsx)(i.a,{href:"#uicollection",children:"UiCollection"})]}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:"根据当前的选择器所确定的筛选条件，对屏幕上的控件进行搜索，直到找到至少一个满足条件的控件为止，并返回所有满足条件的控件集合。"}),"\n",(0,r.jsxs)(i.p,{children:["该函数与",(0,r.jsx)(i.code,{children:"find()"}),"函数的区别在于，该函数永远不会返回空集合；但是，如果屏幕上一直没有出现满足条件的控件，则该函数会保持阻塞。"]}),"\n",(0,r.jsxs)(i.h2,{id:"uiselectorexists",children:["UiSelector.exists()",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#uiselectorexists",children:"#"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"返回 {Boolean}"}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:"判断屏幕上是否存在控件符合选择器所确定的条件。例如要判断某个文本出现就执行某个动作，可以用："}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-js",children:'if (text("某个文本").exists()) {\r\n    //要支持的动作\r\n}\n'})}),"\n",(0,r.jsxs)(i.h2,{id:"uiselectorwaitfor",children:["UiSelector.waitFor()",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#uiselectorwaitfor",children:"#"})]}),"\n",(0,r.jsx)(i.p,{children:"等待屏幕上出现符合条件的控件；在满足该条件的控件出现之前，该函数会一直保持阻塞。"}),"\n",(0,r.jsx)(i.p,{children:'例如要等待包含"哈哈哈"的文本控件出现的代码为：'}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-js",children:'textContains("哈哈哈").waitFor();\n'})}),"\n",(0,r.jsxs)(i.h2,{id:"uiselectorfilterf",children:["UiSelector.filter(f)",(0,r.jsx)(i.a,{className:"header-anchor","aria-hidden":"true",href:"#uiselectorfilterf",children:"#"})]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"f"})," {Function} 过滤函数，参数为 UiObject，返回值为 boolean"]}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:"为当前选择器附加自定义的过滤条件。"}),"\n",(0,r.jsx)(i.p,{children:"例如，要找出屏幕上所有文本长度为 10 的文本控件的代码为："}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-js",children:'var uc = className("TextView").filter(function (w) {\r\n    return w.text().length == 10;\r\n});\n'})})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:i}=Object.assign({},(0,n.ah)(),e.components);return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}let l=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["v1%2F%E5%9F%BA%E7%A1%80%2FwidgetsBasedAutomation%2FuiSelector.md"]={toc:[{text:"selector()",id:"selector",depth:2},{text:"UiSelector.text(str)",id:"uiselectortextstr",depth:2},{text:"UiSelector.textContains(str)",id:"uiselectortextcontainsstr",depth:2},{text:"UiSelector.textStartsWith(prefix)",id:"uiselectortextstartswithprefix",depth:2},{text:"UiSelector.textEndsWith(suffix)",id:"uiselectortextendswithsuffix",depth:2},{text:"UiSelector.textMatches(reg)",id:"uiselectortextmatchesreg",depth:2},{text:"UiSelector.desc(str)",id:"uiselectordescstr",depth:2},{text:"UiSelector.descContains(str)",id:"uiselectordesccontainsstr",depth:2},{text:"UiSelector.descStartsWith(prefix)",id:"uiselectordescstartswithprefix",depth:2},{text:"UiSelector.descEndsWith(suffix)",id:"uiselectordescendswithsuffix",depth:2},{text:"UiSelector.descMatches(reg)",id:"uiselectordescmatchesreg",depth:2},{text:"UiSelector.id(resId)",id:"uiselectoridresid",depth:2},{text:"UiSelector.idContains(str)",id:"uiselectoridcontainsstr",depth:2},{text:"UiSelector.idStartsWith(prefix)",id:"uiselectoridstartswithprefix",depth:2},{text:"UiSelector.idEndsWith(suffix)",id:"uiselectoridendswithsuffix",depth:2},{text:"UiSelector.idMatches(reg)",id:"uiselectoridmatchesreg",depth:2},{text:"UiSelector.className(str)",id:"uiselectorclassnamestr",depth:2},{text:"UiSelector.classNameContains(str)",id:"uiselectorclassnamecontainsstr",depth:2},{text:"UiSelector.classNameStartsWith(prefix)",id:"uiselectorclassnamestartswithprefix",depth:2},{text:"UiSelector.classNameEndsWith(suffix)",id:"uiselectorclassnameendswithsuffix",depth:2},{text:"UiSelector.classNameMatches(reg)",id:"uiselectorclassnamematchesreg",depth:2},{text:"UiSelector.packageName(str)",id:"uiselectorpackagenamestr",depth:2},{text:"UiSelector.packageNameContains(str)",id:"uiselectorpackagenamecontainsstr",depth:2},{text:"UiSelector.packageNameStartsWith(prefix)",id:"uiselectorpackagenamestartswithprefix",depth:2},{text:"UiSelector.packageNameEndsWith(suffix)",id:"uiselectorpackagenameendswithsuffix",depth:2},{text:"UiSelector.packageNameMatches(reg)",id:"uiselectorpackagenamematchesreg",depth:2},{text:"UiSelector.bounds(left, top, right, buttom)",id:"uiselectorboundsleft-top-right-buttom",depth:2},{text:"UiSelector.boundsInside(left, top, right, buttom)",id:"uiselectorboundsinsideleft-top-right-buttom",depth:2},{text:"UiSelector.boundsContains(left, top, right, buttom)",id:"uiselectorboundscontainsleft-top-right-buttom",depth:2},{text:"UiSelector.drawingOrder(order)",id:"uiselectordrawingorderorder",depth:2},{text:"UiSelector.clickable([b = true])",id:"uiselectorclickableb--true",depth:2},{text:"UiSelector.longClickable([b = true])",id:"uiselectorlongclickableb--true",depth:2},{text:"UiSelector.checkable([b = true])",id:"uiselectorcheckableb--true",depth:2},{text:"UiSelector.selected([b = true])",id:"uiselectorselectedb--true",depth:2},{text:"UiSelector.enabled([b = true])",id:"uiselectorenabledb--true",depth:2},{text:"UiSelector.scrollable([b = true])",id:"uiselectorscrollableb--true",depth:2},{text:"UiSelector.editable([b = true])",id:"uiselectoreditableb--true",depth:2},{text:"UiSelector.multiLine([b = true])",id:"uiselectormultilineb--true",depth:2},{text:"UiSelector.findOne()",id:"uiselectorfindone",depth:2},{text:"UiSelector.findOne(timeout)",id:"uiselectorfindonetimeout",depth:2},{text:"UiSelector.findOnce()",id:"uiselectorfindonce",depth:2},{text:"UiSelector.findOnce(i)",id:"uiselectorfindoncei",depth:2},{text:"UiSelector.find()",id:"uiselectorfind",depth:2},{text:"UiSelector.untilFind()",id:"uiselectoruntilfind",depth:2},{text:"UiSelector.exists()",id:"uiselectorexists",depth:2},{text:"UiSelector.waitFor()",id:"uiselectorwaitfor",depth:2},{text:"UiSelector.filter(f)",id:"uiselectorfilterf",depth:2}],title:"UiSelector",headingTitle:"UiSelector",frontmatter:{}}}}]);